import std.time
import std.collections.HashMap
import std.io.println

struct ProfilerEntry {
    start_time: time.Time
    total_time: time.Duration
    call_count: int
}

struct Profiler {
    entries: HashMap<string, ProfilerEntry>

    fn new() -> Profiler {
        return Profiler {
            entries: HashMap<string, ProfilerEntry>.new()
        }
    }

    fn start(self, name: string) {
        let entry = self.entries.get_mut(name)
        if let Some(entry) = entry {
            entry.start_time = time.now()
            entry.call_count += 1
        } else {
            self.entries.insert(name, ProfilerEntry {
                start_time: time.now(),
                total_time: time.Duration.zero(),
                call_count: 1
            })
        }
    }

    fn stop(self, name: string) {
        if let Some(entry) = self.entries.get_mut(name) {
            let duration = time.now() - entry.start_time
            entry.total_time += duration
        }
    }

    fn report(self) {
        println("Profiler Report:")
        for (name, entry) in self.entries {
            let avg_time = entry.total_time / entry.call_count
            println(name + ": " +
                    "Total time: " + entry.total_time.to_string() + ", " +
                    "Calls: " + entry.call_count.to_string() + ", " +
                    "Avg time: " + avg_time.to_string())
        }
    }
}

fn init_profiler() -> Profiler {
    let profiler = Profiler.new()
    println("Profiler initialized")
    return profiler
}
