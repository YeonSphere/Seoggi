// Seoggi Language Server Implementation

import { Project } from "../../project"
import { Parser } from "../../core/compiler/frontend/parser"
import { TypeChecker } from "../../core/compiler/analysis/type_checker"
import { Error } from "../../core/compiler/error"

// LSP types
struct Position {
    line: u32
    character: u32
}

struct Range {
    start: Position
    end: Position
}

struct Location {
    uri: String
    range: Range
}

struct Diagnostic {
    range: Range
    severity: DiagnosticSeverity
    code: Option<String>
    source: String
    message: String
}

enum DiagnosticSeverity {
    Error = 1,
    Warning = 2,
    Information = 3,
    Hint = 4
}

// Language server
struct LanguageServer {
    project: Project
    documents: HashMap<String, Document>
    
    // Constructor
    new(project: Project) -> LanguageServer {
        LanguageServer {
            project,
            documents: HashMap::new()
        }
    }
    
    // Document management
    fn open_document(&mut self, uri: String, text: String) {
        let document = Document::new(uri.clone(), text)
        self.documents.insert(uri, document)
        self.validate_document(&document)
    }
    
    fn change_document(&mut self, uri: String, changes: Vec<TextChange>) {
        if let Some(doc) = self.documents.get_mut(&uri) {
            doc.apply_changes(changes)
            self.validate_document(doc)
        }
    }
    
    fn close_document(&mut self, uri: String) {
        self.documents.remove(&uri)
    }
    
    // Document validation
    fn validate_document(&mut self, document: &Document) {
        // 1. Parse document
        let parser = Parser::new(document.text.clone())
        let ast = match parser.parse() {
            Ok(ast) => ast,
            Err(e) => {
                self.report_error(document.uri.clone(), e)
                return
            }
        }
        
        // 2. Type check
        let type_checker = TypeChecker::new()
        if let Err(e) = type_checker.check_module(&ast) {
            self.report_error(document.uri.clone(), e)
        }
        
        // 3. Effect check
        let effect_checker = EffectChecker::new()
        if let Err(e) = effect_checker.check_module(&ast) {
            self.report_error(document.uri.clone(), e)
        }
    }
    
    // Code completion
    fn complete(&self, uri: String, position: Position) -> Vec<CompletionItem> {
        let mut items = Vec::new()
        
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Get context at position
            let context = self.get_completion_context(doc, position)
            
            // 2. Add relevant completion items
            match context {
                CompletionContext::Type => {
                    items.extend(self.complete_types())
                },
                CompletionContext::Function => {
                    items.extend(self.complete_functions())
                },
                CompletionContext::Variable => {
                    items.extend(self.complete_variables())
                },
                CompletionContext::Effect => {
                    items.extend(self.complete_effects())
                }
            }
        }
        
        items
    }
    
    // Go to definition
    fn goto_definition(&self, uri: String, position: Position) -> Option<Location> {
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Find symbol at position
            let symbol = self.find_symbol_at_position(doc, position)?
            
            // 2. Find symbol definition
            self.find_symbol_definition(&symbol)
        } else {
            None
        }
    }
    
    // Find references
    fn find_references(&self, uri: String, position: Position) -> Vec<Location> {
        let mut references = Vec::new()
        
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Find symbol at position
            if let Some(symbol) = self.find_symbol_at_position(doc, position) {
                // 2. Search for references in all documents
                for doc in self.documents.values() {
                    references.extend(self.find_symbol_references(doc, &symbol))
                }
            }
        }
        
        references
    }
    
    // Code formatting
    fn format(&self, uri: String) -> Option<Vec<TextEdit>> {
        if let Some(doc) = self.documents.get(&uri) {
            // Apply formatting rules
            let formatter = Formatter::new()
            formatter.format_document(doc)
        } else {
            None
        }
    }
    
    // Code actions
    fn code_actions(&self, uri: String, range: Range) -> Vec<CodeAction> {
        let mut actions = Vec::new()
        
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Get diagnostics in range
            let diagnostics = self.get_diagnostics_in_range(doc, range)
            
            // 2. Generate code actions for each diagnostic
            for diagnostic in diagnostics {
                actions.extend(self.create_code_actions(doc, &diagnostic))
            }
        }
        
        actions
    }
    
    // Hover
    fn hover(&self, uri: String, position: Position) -> Option<Hover> {
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Find symbol at position
            let symbol = self.find_symbol_at_position(doc, position)?
            
            // 2. Get symbol information
            let info = self.get_symbol_info(&symbol)?
            
            Some(Hover {
                contents: info,
                range: symbol.range
            })
        } else {
            None
        }
    }
    
    // Signature help
    fn signature_help(&self, uri: String, position: Position) -> Option<SignatureHelp> {
        if let Some(doc) = self.documents.get(&uri) {
            // 1. Find function call at position
            let call = self.find_function_call_at_position(doc, position)?
            
            // 2. Get function signature
            let signature = self.get_function_signature(&call.function)?
            
            Some(SignatureHelp {
                signatures: vec![signature],
                active_signature: 0,
                active_parameter: call.current_parameter
            })
        } else {
            None
        }
    }
    
    // Document symbols
    fn document_symbols(&self, uri: String) -> Vec<DocumentSymbol> {
        let mut symbols = Vec::new()
        
        if let Some(doc) = self.documents.get(&uri) {
            // Parse document and collect symbols
            if let Ok(ast) = Parser::new(doc.text.clone()).parse() {
                symbols = self.collect_document_symbols(&ast)
            }
        }
        
        symbols
    }
    
    // Workspace symbols
    fn workspace_symbols(&self, query: String) -> Vec<SymbolInformation> {
        let mut symbols = Vec::new()
        
        // Search all documents for matching symbols
        for doc in self.documents.values() {
            if let Ok(ast) = Parser::new(doc.text.clone()).parse() {
                symbols.extend(self.find_matching_symbols(&ast, &query))
            }
        }
        
        symbols
    }
    
    // Error reporting
    fn report_error(&self, uri: String, error: Error) {
        let diagnostic = Diagnostic {
            range: error.span.into(),
            severity: DiagnosticSeverity::Error,
            code: None,
            source: "seoggi".to_string(),
            message: error.message
        }
        
        self.publish_diagnostic(uri, diagnostic)
    }
}
