// YeonSphere Universal Open Source License (YUOSL)
// Copyright (c) 2024 Jeremy Matlock (@daedaevibin)
// All rights reserved.
// See LICENSE for full terms.

// Seoggi Build System
// Simple yet powerful build system for Seoggi projects

import { File } from "core/io/file"
import { Path } from "core/io/path"
import { Process } from "core/process"
import { String } from "core/string"
import { YAML } from "core/yaml"

// Build configuration
struct BuildConfig {
    name: String
    version: String
    author: String
    description: String
    entry_point: String
    sources: [String]
    dependencies: [String]
    test_dir: String
    output_dir: String
    
    // Load from YAML
    static fn from_yaml(path: String) -> Result<BuildConfig, String> {
        let yaml = YAML.parse(File.read(path)?)?
        
        Ok(BuildConfig {
            name: yaml.get("name")?.as_string()?,
            version: yaml.get("version")?.as_string()?,
            author: yaml.get("author")?.as_string()?,
            description: yaml.get("description")?.as_string()?,
            entry_point: yaml.get("entry_point")?.as_string()?,
            sources: yaml.get("sources")?.as_array()?.map(|s| s.as_string()?)?,
            dependencies: yaml.get("dependencies")?.as_array()?.map(|s| s.as_string()?)?,
            test_dir: yaml.get("test_dir")?.as_string()?,
            output_dir: yaml.get("output_dir")?.as_string()?
        })
    }
}

// Build system
struct Builder {
    config: BuildConfig
    root_dir: String
    
    // Constructor
    new(config: BuildConfig, root_dir: String) -> Builder {
        Builder { config, root_dir }
    }
    
    // Build project
    fn build(self) -> Result<(), String> {
        println("Building {} v{}", self.config.name, self.config.version)
        
        // Create output directory
        File.create_dir_all(self.config.output_dir)?
        
        // Compile all source files
        for source in self.config.sources {
            let source_path = Path.join(self.root_dir, source)
            let output_path = Path.join(self.config.output_dir, 
                                      Path.with_extension(Path.file_name(source), "o"))
            
            println("Compiling {}...", source)
            Process.run([
                "seoggi_bootstrap",
                "--compile",
                "--output", output_path,
                source_path
            ])?
        }
        
        // Link everything into final executable
        let exe_path = Path.join(self.config.output_dir, self.config.name)
        println("Linking {}...", exe_path)
        Process.run([
            "seoggi_bootstrap",
            "--link",
            "--output", exe_path,
            "--entry-point", self.config.entry_point,
            *self.config.sources.map(|s| Path.join(self.config.output_dir, 
                                                  Path.with_extension(Path.file_name(s), "o")))
        ])?
        
        println("Build successful!")
        Ok(())
    }
    
    // Run tests
    fn test(self) -> Result<(), String> {
        println("Running tests for {} v{}", self.config.name, self.config.version)
        
        let test_path = Path.join(self.root_dir, self.config.test_dir)
        if !File.exists(test_path) {
            return Ok(()) // No tests is not an error
        }
        
        // Find and run all test files
        let mut passed = 0
        let mut failed = 0
        
        for test_file in File.glob(Path.join(test_path, "**/*_test.seo")) {
            print("Testing {}... ", Path.relative_to(test_file, test_path))
            match Process.run(["seoggi_bootstrap", "--test", test_file]) {
                Ok(_) => {
                    println("PASS")
                    passed += 1
                }
                Err(e) => {
                    println("FAIL")
                    println("  Error: {}", e)
                    failed += 1
                }
            }
        }
        
        println("\nTest Results: {} passed, {} failed", passed, failed)
        if failed > 0 {
            Err("Some tests failed")
        } else {
            Ok(())
        }
    }
    
    // Install project
    fn install(self) -> Result<(), String> {
        println("Installing {} v{}", self.config.name, self.config.version)
        
        // First build the project
        self.build()?
        
        // Install executable to bin directory
        let bin_dir = Path.join("/usr/local/bin")
        let exe_path = Path.join(self.config.output_dir, self.config.name)
        
        println("Installing to {}...", bin_dir)
        Process.run([
            "sudo",
            "install",
            "-m", "755",
            exe_path,
            bin_dir
        ])?
        
        println("Installation successful!")
        Ok(())
    }
    
    // Clean build artifacts
    fn clean(self) -> Result<(), String> {
        println("Cleaning {} v{}", self.config.name, self.config.version)
        
        if File.exists(self.config.output_dir) {
            println("Removing {}...", self.config.output_dir)
            File.remove_dir_all(self.config.output_dir)?
        }
        
        println("Clean successful!")
        Ok(())
    }
}

// Main entry point
fn main(args: [String]) -> Result<(), String> {
    if args.len() < 2 {
        return Err("Usage: build <command> [options]\nCommands: build, test, install, clean")
    }
    
    // Load build config
    let config = BuildConfig::from_yaml("build.yaml")?
    let builder = Builder::new(config, Path.current_dir()?)
    
    match args[1] {
        "build" => builder.build(),
        "test" => builder.test(),
        "install" => builder.install(),
        "clean" => builder.clean(),
        _ => Err("Unknown command. Available commands: build, test, install, clean")
    }
}
