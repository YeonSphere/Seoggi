# Seoggi Quantum Circuit Simulator
# Provides quantum circuit simulation capabilities

use std::math::complex;
use std::vector;
use std::error;

# Quantum state representation
type State {
    # Statevector representation
    amplitudes: Vec<Complex>
    num_qubits: Int
}

# Create new quantum state
fn new_state(num_qubits: Int) -> State {
    let size = 1 << num_qubits  # 2^n states
    let mut amplitudes = Vec::new()
    amplitudes.resize(size, Complex::zero())
    amplitudes[0] = Complex::one()  # Initialize to |0...0⟩
    
    State {
        amplitudes,
        num_qubits
    }
}

# Apply single-qubit gate
fn apply_single_qubit_gate(state: &mut State, 
                          gate: Matrix2x2, 
                          qubit: Int) -> Result<(), error::Error> {
    if qubit >= state.num_qubits {
        return Err(error::new("Invalid qubit index"))
    }
    
    let n = state.num_qubits
    let size = 1 << n
    
    # Apply gate in tensor product space
    for i in 0..size {
        if (i & (1 << qubit)) == 0 {
            let i1 = i
            let i2 = i | (1 << qubit)
            
            let a = state.amplitudes[i1]
            let b = state.amplitudes[i2]
            
            state.amplitudes[i1] = gate[0][0] * a + gate[0][1] * b
            state.amplitudes[i2] = gate[1][0] * a + gate[1][1] * b
        }
    }
    
    Ok(())
}

# Apply controlled gate
fn apply_controlled_gate(state: &mut State,
                        gate: Matrix2x2,
                        control: Int,
                        target: Int) -> Result<(), error::Error> {
    if control >= state.num_qubits || target >= state.num_qubits {
        return Err(error::new("Invalid qubit indices"))
    }
    
    let n = state.num_qubits
    let size = 1 << n
    
    # Apply controlled operation
    for i in 0..size {
        if (i & (1 << control)) != 0 {  # Control qubit is 1
            if (i & (1 << target)) == 0 {
                let i1 = i
                let i2 = i | (1 << target)
                
                let a = state.amplitudes[i1]
                let b = state.amplitudes[i2]
                
                state.amplitudes[i1] = gate[0][0] * a + gate[0][1] * b
                state.amplitudes[i2] = gate[1][0] * a + gate[1][1] * b
            }
        }
    }
    
    Ok(())
}

# Common quantum gates
fn hadamard(state: &mut State, qubit: Int) -> Result<(), error::Error> {
    let h = Matrix2x2::new([
        [Complex::new(1.0/2.sqrt(), 0.0), Complex::new(1.0/2.sqrt(), 0.0)],
        [Complex::new(1.0/2.sqrt(), 0.0), Complex::new(-1.0/2.sqrt(), 0.0)]
    ])
    apply_single_qubit_gate(state, h, qubit)
}

fn pauli_x(state: &mut State, qubit: Int) -> Result<(), error::Error> {
    let x = Matrix2x2::new([
        [Complex::zero(), Complex::one()],
        [Complex::one(), Complex::zero()]
    ])
    apply_single_qubit_gate(state, x, qubit)
}

fn pauli_y(state: &mut State, qubit: Int) -> Result<(), error::Error> {
    let y = Matrix2x2::new([
        [Complex::zero(), Complex::new(0.0, -1.0)],
        [Complex::new(0.0, 1.0), Complex::zero()]
    ])
    apply_single_qubit_gate(state, y, qubit)
}

fn pauli_z(state: &mut State, qubit: Int) -> Result<(), error::Error> {
    let z = Matrix2x2::new([
        [Complex::one(), Complex::zero()],
        [Complex::zero(), Complex::new(-1.0, 0.0)]
    ])
    apply_single_qubit_gate(state, z, qubit)
}

fn phase(state: &mut State, qubit: Int, angle: Float) -> Result<(), error::Error> {
    let p = Matrix2x2::new([
        [Complex::one(), Complex::zero()],
        [Complex::zero(), Complex::from_polar(1.0, angle)]
    ])
    apply_single_qubit_gate(state, p, qubit)
}

fn cnot(state: &mut State, control: Int, target: Int) -> Result<(), error::Error> {
    let x = Matrix2x2::new([
        [Complex::zero(), Complex::one()],
        [Complex::one(), Complex::zero()]
    ])
    apply_controlled_gate(state, x, control, target)
}

# Measurement
fn measure(state: &mut State, qubit: Int) -> Result<Int, error::Error> {
    if qubit >= state.num_qubits {
        return Err(error::new("Invalid qubit index"))
    }
    
    let mut prob_zero = 0.0
    let size = 1 << state.num_qubits
    
    # Calculate probability of measuring |0⟩
    for i in 0..size {
        if (i & (1 << qubit)) == 0 {
            prob_zero += state.amplitudes[i].norm_squared()
        }
    }
    
    # Random measurement outcome
    let outcome = if random::float() < prob_zero { 0 } else { 1 }
    
    # Collapse state vector
    let norm = (if outcome == 0 { prob_zero } else { 1.0 - prob_zero }).sqrt()
    for i in 0..size {
        if (i & (1 << qubit)) == outcome {
            state.amplitudes[i] = Complex::zero()
        } else {
            state.amplitudes[i] /= norm
        }
    }
    
    Ok(outcome)
}

# Get quantum state vector
fn get_state_vector(state: &State) -> Vec<Complex> {
    state.amplitudes.clone()
}

# Calculate quantum state probabilities
fn get_probabilities(state: &State) -> Vec<Float> {
    state.amplitudes.map(|amp| amp.norm_squared())
}
