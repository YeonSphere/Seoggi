// Parser Tests

import { Parser, AST, Node, NodeKind } from "../core/compiler/frontend/parser"
import { Error, ErrorKind } from "../core/compiler/error"

#[test]
fn test_variable_declaration() -> Result<(), Error> {
    let source = "let x: i32 = 42"
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    assert_eq!(ast.declarations.len(), 1)
    let decl = &ast.declarations[0]
    
    assert_eq!(decl.kind, NodeKind::VariableDecl)
    assert_eq!(decl.name, "x")
    assert_eq!(decl.type_annotation, Some("i32"))
    assert!(matches!(decl.initializer.kind, NodeKind::IntegerLiteral))
    
    Ok(())
}

#[test]
fn test_function_declaration() -> Result<(), Error> {
    let source = "
    fn add(x: i32, y: i32) -> i32 {
        return x + y
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let func = &ast.declarations[0]
    assert_eq!(func.kind, NodeKind::FunctionDecl)
    assert_eq!(func.name, "add")
    assert_eq!(func.parameters.len(), 2)
    assert_eq!(func.return_type, Some("i32"))
    
    let body = &func.body
    assert_eq!(body.statements.len(), 1)
    assert_eq!(body.statements[0].kind, NodeKind::Return)
    
    Ok(())
}

#[test]
fn test_struct_declaration() -> Result<(), Error> {
    let source = "
    struct Point {
        x: f64
        y: f64
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let struct_decl = &ast.declarations[0]
    assert_eq!(struct_decl.kind, NodeKind::StructDecl)
    assert_eq!(struct_decl.name, "Point")
    assert_eq!(struct_decl.fields.len(), 2)
    
    assert_eq!(struct_decl.fields[0].name, "x")
    assert_eq!(struct_decl.fields[0].type_annotation, "f64")
    
    Ok(())
}

#[test]
fn test_if_statement() -> Result<(), Error> {
    let source = "
    fn test(x: i32) {
        if x > 0 {
            return true
        } else {
            return false
        }
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let func = &ast.declarations[0]
    let if_stmt = &func.body.statements[0]
    
    assert_eq!(if_stmt.kind, NodeKind::If)
    assert!(matches!(if_stmt.condition.kind, NodeKind::BinaryOp))
    assert!(if_stmt.else_branch.is_some())
    
    Ok(())
}

#[test]
fn test_loop_statements() -> Result<(), Error> {
    let source = "
    fn test() {
        while x < 10 {
            x = x + 1
        }
        
        for i in 0..10 {
            print(i)
        }
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let func = &ast.declarations[0]
    let while_stmt = &func.body.statements[0]
    let for_stmt = &func.body.statements[1]
    
    assert_eq!(while_stmt.kind, NodeKind::While)
    assert_eq!(for_stmt.kind, NodeKind::For)
    
    Ok(())
}

#[test]
fn test_expressions() -> Result<(), Error> {
    let source = "let result = (2 + 3) * 4"
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let decl = &ast.declarations[0]
    let expr = &decl.initializer
    
    assert_eq!(expr.kind, NodeKind::BinaryOp)
    assert_eq!(expr.operator, "*")
    
    let left = &expr.left
    assert_eq!(left.kind, NodeKind::BinaryOp)
    assert_eq!(left.operator, "+")
    
    Ok(())
}

#[test]
fn test_trait_declaration() -> Result<(), Error> {
    let source = "
    trait Display {
        fn to_string(&self) -> String
        fn from_string(s: String) -> Self
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let trait_decl = &ast.declarations[0]
    assert_eq!(trait_decl.kind, NodeKind::TraitDecl)
    assert_eq!(trait_decl.name, "Display")
    assert_eq!(trait_decl.methods.len(), 2)
    
    Ok(())
}

#[test]
fn test_impl_block() -> Result<(), Error> {
    let source = "
    impl Display for Point {
        fn to_string(&self) -> String {
            format!("({}, {})", self.x, self.y)
        }
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let impl_block = &ast.declarations[0]
    assert_eq!(impl_block.kind, NodeKind::ImplBlock)
    assert_eq!(impl_block.trait_name, Some("Display"))
    assert_eq!(impl_block.type_name, "Point")
    
    Ok(())
}

#[test]
#[should_panic]
fn test_syntax_error() {
    let source = "fn test( {"  // Missing closing parenthesis
    let parser = Parser::new(source)
    let _ = parser.parse().unwrap()
}

#[test]
fn test_generic_declarations() -> Result<(), Error> {
    let source = "
    struct Vec<T> {
        data: *mut T
        len: usize
        capacity: usize
    }
    
    impl<T> Vec<T> {
        fn new() -> Self {
            Vec { data: null(), len: 0, capacity: 0 }
        }
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let struct_decl = &ast.declarations[0]
    assert_eq!(struct_decl.generic_params.len(), 1)
    assert_eq!(struct_decl.generic_params[0], "T")
    
    let impl_block = &ast.declarations[1]
    assert_eq!(impl_block.generic_params.len(), 1)
    
    Ok(())
}

#[test]
fn test_attributes() -> Result<(), Error> {
    let source = "
    #[derive(Debug, Clone)]
    #[repr(C)]
    struct Point {
        x: f64
        y: f64
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let struct_decl = &ast.declarations[0]
    assert_eq!(struct_decl.attributes.len(), 2)
    
    let derive_attr = &struct_decl.attributes[0]
    assert_eq!(derive_attr.name, "derive")
    assert_eq!(derive_attr.args.len(), 2)
    
    Ok(())
}

#[test]
fn test_effect_handlers() -> Result<(), Error> {
    let source = "
    effect State<T> {
        fn get() -> T
        fn set(value: T)
    }
    
    handler StateHandler<T> for State<T> {
        fn get() -> T {
            self.value.clone()
        }
        
        fn set(value: T) {
            self.value = value
        }
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let effect_decl = &ast.declarations[0]
    assert_eq!(effect_decl.kind, NodeKind::EffectDecl)
    assert_eq!(effect_decl.operations.len(), 2)
    
    let handler_decl = &ast.declarations[1]
    assert_eq!(handler_decl.kind, NodeKind::HandlerDecl)
    assert_eq!(handler_decl.implementations.len(), 2)
    
    Ok(())
}

#[test]
#[property_test]
fn test_expression_properties(expr: String) -> Result<(), Error> {
    // Property: All valid expressions should be parseable
    if is_valid_expression(&expr) {
        let parser = Parser::new(&expr)
        let ast = parser.parse_expression()?
        assert!(ast.is_some())
    }
    
    Ok(())
}

#[test]
#[fuzz_test]
fn test_parser_fuzzing(data: &[u8]) {
    if let Ok(input) = String::from_utf8(data.to_vec()) {
        let parser = Parser::new(&input)
        let _ = parser.parse(); // Should not crash
    }
}

#[test]
#[benchmark]
fn bench_parser_performance() -> Result<(), Error> {
    let source = include_str!("../examples/large_file.seo")
    let parser = Parser::new(source)
    let _ = parser.parse()?
    Ok(())
}

#[test]
fn test_pattern_matching() -> Result<(), Error> {
    let source = "
    match value {
        Some(x) => println(x),
        None => println("nothing"),
        Point { x, y } => println(x + y),
        _ => println("default")
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let match_expr = &ast.declarations[0]
    assert_eq!(match_expr.kind, NodeKind::Match)
    assert_eq!(match_expr.arms.len(), 4)
    
    Ok(())
}

#[test]
fn test_type_inference() -> Result<(), Error> {
    let source = "
    fn test() {
        let x = 42        // i32
        let y = 3.14     // f64
        let s = "hello"  // String
        let v = vec![]   // Vec<T>
    }
    "
    let parser = Parser::new(source)
    let ast = parser.parse()?
    
    let func = &ast.declarations[0]
    assert_eq!(func.body.statements.len(), 4)
    
    // Type annotations should be inferred by type checker
    let decls = func.body.statements.iter()
        .filter(|s| s.kind == NodeKind::VariableDecl)
        .collect::<Vec<_>>()
        
    assert_eq!(decls.len(), 4)
    assert!(decls.iter().all(|d| d.type_annotation.is_none()))
    
    Ok(())
}
