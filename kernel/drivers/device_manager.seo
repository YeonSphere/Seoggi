import std.collections.HashMap

struct Device {
    id: string
    name: string
    type: string
    status: string
}

struct DeviceManager {
    devices: HashMap<string, Device>

    fn new() -> DeviceManager {
        return DeviceManager {
            devices: HashMap<string, Device>.new()
        }
    }

    fn register_device(self, device: Device) {
        self.devices.insert(device.id, device)
    }

    fn unregister_device(self, device_id: string) {
        self.devices.remove(device_id)
    }

    fn get_device(self, device_id: string) -> Device? {
        return self.devices.get(device_id)
    }

    fn list_devices(self) -> [Device] {
        return self.devices.values()
    }

    fn update_device_status(self, device_id: string, new_status: string) {
        if let Some(device) = self.devices.get_mut(device_id) {
            device.status = new_status
        }
    }
}

fn init_device_manager() -> DeviceManager {
    let device_manager = DeviceManager.new()
    // Initialize with some default devices if needed
    println("Device Manager initialized")
    return device_manager
}
