import std.collections.HashMap
import std.io.println
import std.time

struct Server {
    port: int
    is_running: bool
    start_time: time.Instant
    connections: HashMap<string, Connection>

    fn new(port: int) -> Server {
        return Server {
            port: port,
            is_running: false,
            start_time: time.Instant.now(),
            connections: HashMap<string, Connection>.new()
        }
    }

    fn start(self) {
        if !self.is_running {
            self.is_running = true
            self.start_time = time.Instant.now()
            println("Server started on port " + self.port.to_string())
        } else {
            println("Server is already running")
        }
    }

    fn stop(self) {
        if self.is_running {
            self.is_running = false
            let uptime = time.Instant.now() - self.start_time
            println("Server stopped. Uptime: " + uptime.to_string())
        } else {
            println("Server is not running")
        }
    }

    fn add_connection(self, id: string, connection: Connection) {
        self.connections.insert(id, connection)
        println("New connection added: " + id)
    }

    fn remove_connection(self, id: string) {
        if self.connections.remove(id) != None {
            println("Connection removed: " + id)
        } else {
            println("Connection not found: " + id)
        }
    }

    fn get_connection_count(self) -> int {
        return self.connections.len()
    }

    fn status(self) {
        if self.is_running {
            let uptime = time.Instant.now() - self.start_time
            println("Server is running on port " + self.port.to_string())
            println("Uptime: " + uptime.to_string())
            println("Active connections: " + self.get_connection_count().to_string())
        } else {
            println("Server is not running")
        }
    }
}

struct Connection {
    ip: string
    connected_at: time.Instant

    fn new(ip: string) -> Connection {
        return Connection {
            ip: ip,
            connected_at: time.Instant.now()
        }
    }
}

fn init_server(port: int) -> Server {
    let server = Server.new(port)
    println("Server initialized on port " + port.to_string())
    return server
}
