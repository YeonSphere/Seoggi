quantum Gate {
    // Base gate properties
    private target: int
    private control: int = -1  // -1 indicates no control qubit
    private matrix: Matrix
    private name: string

    // Constructor
    init(target: int, matrix: Matrix, name: string) {
        self.target = target
        self.matrix = matrix
        self.name = name
    }

    // Getters
    fn get_target() -> int { return self.target }
    fn get_control() -> int { return self.control }
    fn get_matrix() -> Matrix { return self.matrix }
    fn get_name() -> string { return self.name }

    // Control qubit management
    fn set_control(control: int) { self.control = control }
    fn is_controlled() -> bool { return self.control >= 0 }

    // Gate application
    fn apply(statevector: vector<complex>, num_qubits: int) {
        if self.is_controlled() {
            apply_controlled(statevector, num_qubits)
        } else {
            apply_single(statevector, num_qubits)
        }
    }

    // Gate operations
    private fn apply_single(statevector: vector<complex>, num_qubits: int) {
        let n = 1 << num_qubits
        let target_mask = 1 << self.target
        
        for i in range(0, n, 2) {
            if (i & target_mask) == 0 {
                let i1 = i | target_mask
                let temp0 = statevector[i]
                let temp1 = statevector[i1]
                
                statevector[i] = self.matrix[0][0] * temp0 + self.matrix[0][1] * temp1
                statevector[i1] = self.matrix[1][0] * temp0 + self.matrix[1][1] * temp1
            }
        }
    }

    private fn apply_controlled(statevector: vector<complex>, num_qubits: int) {
        let n = 1 << num_qubits
        let control_mask = 1 << self.control
        let target_mask = 1 << self.target
        
        for i in range(n) {
            if (i & control_mask) != 0 && (i & target_mask) == 0 {
                let i1 = i | target_mask
                let temp0 = statevector[i]
                let temp1 = statevector[i1]
                
                statevector[i] = self.matrix[0][0] * temp0 + self.matrix[0][1] * temp1
                statevector[i1] = self.matrix[1][0] * temp0 + self.matrix[1][1] * temp1
            }
        }
    }
}

// Pauli gates
quantum PauliXGate : Gate {
    init(target: int) {
        let matrix = Matrix([
            [0, 1],
            [1, 0]
        ])
        super(target, matrix, "X")
    }
}

quantum PauliYGate : Gate {
    init(target: int) {
        let matrix = Matrix([
            [0, -i],
            [i, 0]
        ])
        super(target, matrix, "Y")
    }
}

quantum PauliZGate : Gate {
    init(target: int) {
        let matrix = Matrix([
            [1, 0],
            [0, -1]
        ])
        super(target, matrix, "Z")
    }
}

// Hadamard gate
quantum HadamardGate : Gate {
    init(target: int) {
        let inv_sqrt2 = 1.0 / sqrt(2.0)
        let matrix = Matrix([
            [inv_sqrt2, inv_sqrt2],
            [inv_sqrt2, -inv_sqrt2]
        ])
        super(target, matrix, "H")
    }
}

// Phase gate
quantum PhaseGate : Gate {
    init(target: int, angle: float) {
        let matrix = Matrix([
            [1, 0],
            [0, exp(i * angle)]
        ])
        super(target, matrix, "P")
    }
}

// CNOT gate
quantum CNOTGate : Gate {
    init(control: int, target: int) {
        let matrix = Matrix([
            [1, 0],
            [0, 1]
        ])
        super(target, matrix, "CNOT")
        self.set_control(control)
    }

    override fn apply(statevector: vector<complex>, num_qubits: int) {
        let n = 1 << num_qubits
        let control_mask = 1 << self.control
        let target_mask = 1 << self.target
        
        for i in range(n) {
            if (i & control_mask) != 0 {
                statevector[i ^ target_mask] = statevector[i]
            }
        }
    }
}

// Rotation gates
quantum RXGate : Gate {
    init(target: int, angle: float) {
        let cos_half = cos(angle / 2)
        let sin_half = sin(angle / 2)
        let matrix = Matrix([
            [cos_half, -i * sin_half],
            [-i * sin_half, cos_half]
        ])
        super(target, matrix, "RX")
    }
}

quantum RYGate : Gate {
    init(target: int, angle: float) {
        let cos_half = cos(angle / 2)
        let sin_half = sin(angle / 2)
        let matrix = Matrix([
            [cos_half, -sin_half],
            [sin_half, cos_half]
        ])
        super(target, matrix, "RY")
    }
}

quantum RZGate : Gate {
    init(target: int, angle: float) {
        let cos_half = cos(angle / 2)
        let sin_half = sin(angle / 2)
        let matrix = Matrix([
            [exp(-i * angle/2), 0],
            [0, exp(i * angle/2)]
        ])
        super(target, matrix, "RZ")
    }
}

// Controlled phase gate
quantum CPhaseGate : Gate {
    init(control: int, target: int, angle: float) {
        let matrix = Matrix([
            [1, 0],
            [0, exp(i * angle)]
        ])
        super(target, matrix, "CP")
        self.set_control(control)
    }
}

// Swap gate
quantum SwapGate : Gate {
    init(qubit1: int, qubit2: int) {
        let matrix = Matrix([
            [1, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1]
        ])
        super(qubit1, matrix, "SWAP")
        self.qubit2 = qubit2
    }

    override fn apply(statevector: vector<complex>, num_qubits: int) {
        let n = 1 << num_qubits
        let mask1 = 1 << self.target
        let mask2 = 1 << self.qubit2
        
        for i in range(n) {
            if ((i & mask1) == 0 && (i & mask2) != 0) || 
               ((i & mask1) != 0 && (i & mask2) == 0) {
                let j = i ^ mask1 ^ mask2
                swap(statevector[i], statevector[j])
            }
        }
    }
}

// Toffoli gate (CCNOT)
quantum ToffoliGate : Gate {
    init(control1: int, control2: int, target: int) {
        let matrix = Matrix([
            [1, 0],
            [0, 1]
        ])
        super(target, matrix, "CCNOT")
        self.control1 = control1
        self.control2 = control2
    }

    override fn apply(statevector: vector<complex>, num_qubits: int) {
        let n = 1 << num_qubits
        let control1_mask = 1 << self.control1
        let control2_mask = 1 << self.control2
        let target_mask = 1 << self.target
        
        for i in range(n) {
            if (i & control1_mask) != 0 && (i & control2_mask) != 0 {
                statevector[i ^ target_mask] = statevector[i]
            }
        }
    }
}
