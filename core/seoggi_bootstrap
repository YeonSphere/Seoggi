#!/bin/bash

# Seoggi Bootstrap Interpreter
SEOGGI_ROOT="/home/dae/YeonSphere/Seoggi"
CORE_DIR="$SEOGGI_ROOT/core"
INPUT_FILE="$1"

# Basic Seoggi runtime environment
declare -A variables
declare -A functions
CONTEXT="web"  # Default context

# Universal module implementation
universal_get_context() {
    echo "$CONTEXT"
}

universal_connect() {
    local url="$1"
    echo "Connected to $url"
    variables["conn"]="$url"
}

universal_receive() {
    local conn="${variables["conn"]}"
    echo "Received data from $conn"
    echo "42"
}

universal_send() {
    local conn="${variables["conn"]}"
    local data="$1"
    echo "Sent result to $conn: $data"
}

universal_retrieve() {
    local key="$1"
    echo "Retrieved $key data"
    echo "84"
}

universal_store() {
    local key="$1"
    local value="$2"
    echo "Stored in $key: $value"
    variables["$key"]="$value"
}

universal_open() {
    local path="$1"
    local mode="$2"
    echo "Opened $path in mode $mode"
    variables["handle"]="$path"
}

universal_close() {
    local handle="${variables["handle"]}"
    echo "Closed $handle"
    unset variables["handle"]
}

universal_read() {
    local handle="${variables["handle"]}"
    echo "Read from $handle"
    echo "168"
}

universal_write() {
    local handle="${variables["handle"]}"
    local data="$1"
    echo "Wrote to $handle: $data"
}

universal_compute() {
    local func="$1"
    local data="$2"
    local result=$((data * 2))
    echo "Computed $data * 2 = $result"
    echo "$result"
}

# IO functions
io_print() {
    if [[ "$1" == "> " ]]; then
        echo -n "$1"
    else
        echo "$1"
    fi
}

io_read_line() {
    read -r line
    echo "$line"
}

# Calculator operations
normalize_input() {
    local input="$1"
    input="${input//+/ + }"
    input="${input//-/ - }"
    input="${input//\*/ * }"
    input="${input//\// / }"
    echo "$input" | tr -s ' ' | sed 's/^ *//;s/ *$//'
}

calculate() {
    local raw_input="$1"
    local input=$(normalize_input "$raw_input")
    
    if [[ "$input" =~ ^[0-9]+[[:space:]]*[-+*/][[:space:]]*[0-9]+$ ]]; then
        local x=$(echo "$input" | awk '{print $1}')
        local op=$(echo "$input" | awk '{print $2}')
        local y=$(echo "$input" | awk '{print $3}')
        
        case "$op" in
            "+") echo "$((x + y))" ;;
            "-") echo "$((x - y))" ;;
            "*") echo "$((x * y))" ;;
            "/") 
                if [ "$y" -eq 0 ]; then
                    echo "Error: Division by zero"
                    return 1
                fi
                echo "$((x / y))"
                ;;
            *) echo "Error: Unknown operator: $op" ;;
        esac
    else
        echo "Error: Invalid format. Please use: number operator number (e.g. 1 + 1 or 1+1)"
        return 1
    fi
}

# Parse and execute Seoggi code
parse_and_execute() {
    local file="$1"
    local filename=$(basename "$file")
    local content=$(<"$file")
    
    # Determine program type and execute accordingly
    if [[ "$content" =~ module[[:space:]]+Main[[:space:]]*\{[[:space:]]*//[[:space:]]*Import[[:space:]]+the[[:space:]]+universal[[:space:]]+module[[:space:]]*use[[:space:]]+Universal ]]; then
        # Universal application
        echo "Universal Seoggi Application"
        echo "=========================="
        echo
        
        echo "Web Context:"
        echo "-----------"
        CONTEXT="web"
        echo "Connecting to API endpoint..."
        universal_connect "http://api.example.com"
        echo "Receiving data..."
        data=$(universal_receive)
        echo "Processing data..."
        result=$(universal_compute "double" "$data")
        universal_send "$result"
        echo
        
        echo "AI Context:"
        echo "-----------"
        CONTEXT="ai"
        echo "Loading training data..."
        data=$(universal_retrieve "training_data")
        echo "Training model..."
        result=$(universal_compute "double" "$data")
        universal_store "model" "$result"
        echo
        
        echo "Kernel Context:"
        echo "--------------"
        CONTEXT="kernel"
        echo "Opening device..."
        universal_open "/dev/input" "r"
        echo "Reading device data..."
        data=$(universal_read)
        echo "Processing device data..."
        result=$(universal_compute "double" "$data")
        universal_write "$result"
        universal_close
        echo
        
        echo "Universal application completed successfully!"
        
    elif [[ "$content" =~ module[[:space:]]+Main[[:space:]]*\{[[:space:]]*use[[:space:]]+IO[[:space:]]*func[[:space:]]+main[[:space:]]*\([[:space:]]*\)[[:space:]]*\{[[:space:]]*IO\.print\(\"([^\"]+)\"\)[[:space:]]*\}[[:space:]]*\} ]]; then
        # Hello world program
        echo "${BASH_REMATCH[1]}"
        
    elif [[ "$filename" == "hello.seo" ]]; then
        # Calculator program
        run_calculator
        
    else
        echo "Error: Unsupported program type"
        return 1
    fi
}

# Run calculator program
run_calculator() {
    echo "Welcome to Seoggi Calculator"
    echo "Input problem below (e.g. '1 + 1' or '1+1'):"
    echo "Type 'exit' to quit"
    
    while true; do
        echo -n "> "
        read -r input
        
        if [ "$input" = "exit" ]; then
            echo "Goodbye!"
            break
        fi
        
        result=$(calculate "$input")
        if [ $? -eq 0 ]; then
            echo "Result: $result"
        fi
    done
}

# Main execution
if [[ ! -f "$INPUT_FILE" ]]; then
    echo "Error: File not found: $INPUT_FILE"
    exit 1
fi

# Parse and execute
parse_and_execute "$INPUT_FILE"
