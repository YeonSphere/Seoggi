class Token {
    type: string
    value: string
    line: int
    column: int

    func init(type: string, value: string, line: int, column: int) {
        self.type = type
        self.value = value
        self.line = line
        self.column = column
    }
}

class Lexer {
    func tokenize(input: string) -> [Token] {
        var tokens: [Token] = []
        var current_pos = 0
        var line = 1
        var column = 1

        while current_pos < len(input) {
            var char = input[current_pos]

            if char.is_whitespace() {
                if char == '\n' {
                    line += 1
                    column = 1
                } else {
                    column += 1
                }
                current_pos += 1
                continue
            }

            if char.is_alpha() {
                var identifier = ""
                var start_column = column
                while current_pos < len(input) and (input[current_pos].is_alpha() or input[current_pos].is_digit()) {
                    identifier += input[current_pos]
                    current_pos += 1
                    column += 1
                }
                tokens.append(Token("IDENTIFIER", identifier, line, start_column))
                continue
            }

            if char.is_digit() {
                var number = ""
                var start_column = column
                while current_pos < len(input) and input[current_pos].is_digit() {
                    number += input[current_pos]
                    current_pos += 1
                    column += 1
                }
                tokens.append(Token("NUMBER", number, line, start_column))
                continue
            }

            # Handle operators and other symbols
            var symbol_tokens = {
                "+": "PLUS",
                "-": "MINUS",
                "*": "MULTIPLY",
                "/": "DIVIDE",
                "=": "EQUALS",
                "(": "LEFT_PAREN",
                ")": "RIGHT_PAREN",
                "{": "LEFT_BRACE",
                "}": "RIGHT_BRACE",
            }

            if char in symbol_tokens {
                tokens.append(Token(symbol_tokens[char], char, line, column))
                current_pos += 1
                column += 1
                continue
            }

            # If we reach here, we've encountered an unknown character
            raise Error(f"Unknown character '{char}' at line {line}, column {column}")
        }

        return tokens
    }
}
