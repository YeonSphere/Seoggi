class Parser:
    def __init__(self, tokens):
        self.tokens = tokens
        self.current_token = None
        self.token_index = -1
        self.advance()

    def advance(self):
        self.token_index += 1
        if self.token_index < len(self.tokens):
            self.current_token = self.tokens[self.token_index]
        else:
            self.current_token = None

    def parse(self):
        return self.parse_program()

    def parse_program(self):
        statements = []
        while self.current_token is not None:
            statements.append(self.parse_statement())
        return {'type': 'Program', 'body': statements}

    def parse_statement(self):
        if self.current_token.type == 'KEYWORD':
            if self.current_token.value == 'func':
                return self.parse_function_declaration()
            elif self.current_token.value == 'var':
                return self.parse_variable_declaration()
            elif self.current_token.value == 'if':
                return self.parse_if_statement()
            elif self.current_token.value == 'while':
                return self.parse_while_statement()
            elif self.current_token.value == 'return':
                return self.parse_return_statement()
        
        return self.parse_expression_statement()

    def parse_function_declaration(self):
        # TODO: Implement function declaration parsing
        pass

    def parse_variable_declaration(self):
        # TODO: Implement variable declaration parsing
        pass

    def parse_if_statement(self):
        # TODO: Implement if statement parsing
        pass

    def parse_while_statement(self):
        # TODO: Implement while statement parsing
        pass

    def parse_return_statement(self):
        # TODO: Implement return statement parsing
        pass

    def parse_expression_statement(self):
        # TODO: Implement expression statement parsing
        pass

    def parse_expression(self):
        # TODO: Implement expression parsing
        pass

    def expect(self, token_type):
        if self.current_token.type == token_type:
            token = self.current_token
            self.advance()
            return token
        else:
            raise SyntaxError(f"Expected {token_type}, but got {self.current_token.type}")
