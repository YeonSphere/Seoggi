// Test Commands Module
// Provides built-in commands for running tests

import { TestRunner } from "../../tests/test_runner"
import { Project } from "../project"
import { Error, ErrorKind } from "../error"

// Command to run all tests
fn cmd_test(args: Vec<String>) -> Result<(), Error> {
    let project = Project::load()?
    let runner = TestRunner::new(project)
    
    // Parse command line arguments
    let mut parallel = true
    let mut filter = None
    let mut test_type = None
    
    let mut i = 0
    while i < args.len() {
        match args[i].as_str() {
            "--no-parallel" => parallel = false,
            "--filter" => {
                if i + 1 < args.len() {
                    filter = Some(args[i + 1].clone())
                    i += 1
                }
            },
            "--type" => {
                if i + 1 < args.len() {
                    test_type = Some(match args[i + 1].as_str() {
                        "unit" => TestKind::Unit,
                        "integration" => TestKind::Integration,
                        "property" => TestKind::Property,
                        "fuzz" => TestKind::Fuzz,
                        "benchmark" => TestKind::Benchmark,
                        _ => return Err(Error::new(ErrorKind::InvalidArgument))
                    })
                    i += 1
                }
            },
            _ => return Err(Error::new(ErrorKind::InvalidArgument))
        }
        i += 1
    }
    
    // Configure test runner
    runner.set_parallel(parallel)
    if let Some(f) = filter {
        runner.set_filter(f)
    }
    if let Some(t) = test_type {
        runner.set_test_type(t)
    }
    
    // Run tests and report results
    runner.run_tests()
}

// Command to run tests with coverage reporting
fn cmd_test_coverage(args: Vec<String>) -> Result<(), Error> {
    let project = Project::load()?
    let runner = TestRunner::new(project)
    
    // Enable coverage tracking
    runner.enable_coverage()
    
    // Run tests
    runner.run_tests()?
    
    // Generate coverage report
    runner.generate_coverage_report()
}

// Command to run benchmarks
fn cmd_bench(args: Vec<String>) -> Result<(), Error> {
    let project = Project::load()?
    let runner = TestRunner::new(project)
    
    // Set test type to benchmark
    runner.set_test_type(TestKind::Benchmark)
    
    // Run benchmarks
    runner.run_tests()
}

// Command to run fuzzing tests
fn cmd_fuzz(args: Vec<String>) -> Result<(), Error> {
    let project = Project::load()?
    let runner = TestRunner::new(project)
    
    // Set test type to fuzz
    runner.set_test_type(TestKind::Fuzz)
    
    // Parse fuzz options
    let mut time_limit = None
    let mut memory_limit = None
    
    let mut i = 0
    while i < args.len() {
        match args[i].as_str() {
            "--time" => {
                if i + 1 < args.len() {
                    time_limit = Some(args[i + 1].parse()?)
                    i += 1
                }
            },
            "--memory" => {
                if i + 1 < args.len() {
                    memory_limit = Some(args[i + 1].parse()?)
                    i += 1
                }
            },
            _ => return Err(Error::new(ErrorKind::InvalidArgument))
        }
        i += 1
    }
    
    // Configure fuzzer
    if let Some(t) = time_limit {
        runner.set_fuzz_time_limit(t)
    }
    if let Some(m) = memory_limit {
        runner.set_fuzz_memory_limit(m)
    }
    
    // Run fuzzing
    runner.run_tests()
}

// Command to run property-based tests
fn cmd_check(args: Vec<String>) -> Result<(), Error> {
    let project = Project::load()?
    let runner = TestRunner::new(project)
    
    // Set test type to property
    runner.set_test_type(TestKind::Property)
    
    // Parse property test options
    let mut num_tests = 100
    let mut max_shrinks = 100
    
    let mut i = 0
    while i < args.len() {
        match args[i].as_str() {
            "--tests" => {
                if i + 1 < args.len() {
                    num_tests = args[i + 1].parse()?
                    i += 1
                }
            },
            "--shrinks" => {
                if i + 1 < args.len() {
                    max_shrinks = args[i + 1].parse()?
                    i += 1
                }
            },
            _ => return Err(Error::new(ErrorKind::InvalidArgument))
        }
        i += 1
    }
    
    // Configure property testing
    runner.set_property_test_config(num_tests, max_shrinks)
    
    // Run property tests
    runner.run_tests()
}

// Register test commands
pub fn register_test_commands(registry: &mut CommandRegistry) {
    registry.register("test", cmd_test, "Run tests")
    registry.register("test-coverage", cmd_test_coverage, "Run tests with coverage reporting")
    registry.register("bench", cmd_bench, "Run benchmarks")
    registry.register("fuzz", cmd_fuzz, "Run fuzzing tests")
    registry.register("check", cmd_check, "Run property-based tests")
}
