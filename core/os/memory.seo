# Seoggi Memory Management System
# Implements virtual memory and memory management

# Memory Protection Flags
type Protection {
    READ: 1,
    WRITE: 2,
    EXECUTE: 4
}

# Memory Page
type Page {
    virtual_address: int
    physical_address: int
    size: int
    protection: int
    dirty: bool
    referenced: bool
    present: bool
}

# Memory Region
type MemoryRegion {
    start_address: int
    end_address: int
    protection: int
    pages: List[Page]
    type: String  # "code", "data", "heap", "stack"
}

# Page Table Entry
type PageTableEntry {
    physical_frame: int
    present: bool
    writable: bool
    user_accessible: bool
    write_through: bool
    cache_disabled: bool
    accessed: bool
    dirty: bool
    huge_page: bool
    global: bool
    protection: int
}

# Memory Management Functions
fn allocate_pages(count: int, protection: int) -> List[Page] {
    pages = []
    for i in range(count) {
        # Allocate physical memory
        physical_addr = allocate_physical_frame()
        if physical_addr == null {
            # Free already allocated pages
            for page in pages {
                free_physical_frame(page.physical_address)
            }
            error("Out of physical memory")
        }
        
        # Create page
        page = Page {
            virtual_address: find_free_virtual_address(),
            physical_address: physical_addr,
            size: page_size(),
            protection: protection,
            dirty: false,
            referenced: false,
            present: true
        }
        
        # Map page
        map_page(page)
        pages.append(page)
    }
    return pages
}

fn free_pages(pages: List[Page]) {
    for page in pages {
        # Unmap page
        unmap_page(page)
        
        # Free physical memory
        free_physical_frame(page.physical_address)
    }
}

fn map_page(page: Page) {
    # Create page table entry
    entry = PageTableEntry {
        physical_frame: page.physical_address,
        present: true,
        writable: (page.protection & Protection.WRITE) != 0,
        user_accessible: true,
        write_through: false,
        cache_disabled: false,
        accessed: false,
        dirty: false,
        huge_page: false,
        global: false,
        protection: page.protection
    }
    
    # Add to page table
    add_page_table_entry(page.virtual_address, entry)
    
    # Flush TLB for this address
    flush_tlb_entry(page.virtual_address)
}

fn unmap_page(page: Page) {
    # Remove from page table
    remove_page_table_entry(page.virtual_address)
    
    # Flush TLB for this address
    flush_tlb_entry(page.virtual_address)
}

fn handle_page_fault(fault_address: int, error_code: int) {
    # Check if address is valid
    region = find_memory_region(fault_address)
    if region == null {
        error("Invalid memory access")
    }
    
    # Get page containing fault address
    page = get_page_for_address(fault_address)
    
    if !page.present {
        # Page not in memory, need to load it
        if is_swap_page(page) {
            # Load from swap
            load_from_swap(page)
        } else {
            # Allocate new page
            physical_addr = allocate_physical_frame()
            if physical_addr == null {
                # Need to swap out a page
                victim_page = select_page_to_swap()
                swap_out_page(victim_page)
                physical_addr = victim_page.physical_address
            }
            page.physical_address = physical_addr
            page.present = true
            map_page(page)
        }
    } else {
        # Page protection violation
        if !check_access_rights(page, error_code) {
            error("Protection violation")
        }
    }
}

fn create_memory_region(start: int, size: int, protection: int, type: String) -> MemoryRegion {
    # Create new memory region
    region = MemoryRegion {
        start_address: start,
        end_address: start + size,
        protection: protection,
        pages: [],
        type: type
    }
    
    # Allocate pages for region
    pages_needed = size / page_size()
    region.pages = allocate_pages(pages_needed, protection)
    
    # Add to memory regions list
    add_memory_region(region)
    
    return region
}

fn destroy_memory_region(region: MemoryRegion) {
    # Free all pages in region
    free_pages(region.pages)
    
    # Remove from memory regions list
    remove_memory_region(region)
}

# Memory Management Helper Functions
fn page_size() -> int {
    return 4096  # 4KB pages
}

fn find_free_virtual_address() -> int {
    # Find a free virtual address range
    return next_free_virtual_address()
}

fn select_page_to_swap() -> Page {
    # Implement page replacement algorithm (e.g., LRU)
    return find_least_recently_used_page()
}

fn swap_out_page(page: Page) {
    # Write page to swap space
    write_to_swap(page)
    
    # Update page table
    page.present = false
    unmap_page(page)
}

fn load_from_swap(page: Page) {
    # Read page from swap space
    read_from_swap(page)
    
    # Update page table
    page.present = true
    map_page(page)
}

fn check_access_rights(page: Page, error_code: int) -> bool {
    # Check if access is allowed based on protection flags
    return (page.protection & error_code) != 0
}
