# Seoggi Process Management System
# Implements core process management functionality

# Process States
type ProcessState {
    NEW,
    READY,
    RUNNING,
    WAITING,
    TERMINATED
}

# Process Control Block
type PCB {
    pid: int
    state: ProcessState
    priority: int
    memory_info: MemoryInfo
    cpu_time: int
    parent_pid: int?
    children: List[int]
}

# Memory Information
type MemoryInfo {
    base_address: int
    size: int
    permissions: int
    mapped_files: List[String]
}

# Process Management Functions
fn create_process(program: String, args: List[String]) -> int {
    # Allocate PCB
    pcb = PCB {
        pid: generate_pid(),
        state: ProcessState.NEW,
        priority: default_priority(),
        memory_info: allocate_memory(),
        cpu_time: 0,
        parent_pid: current_process_id(),
        children: []
    }
    
    # Load program into memory
    load_program(pcb.memory_info, program)
    
    # Initialize process state
    initialize_process_state(pcb, args)
    
    # Add to process table
    add_to_process_table(pcb)
    
    # Set process state to ready
    pcb.state = ProcessState.READY
    
    return pcb.pid
}

fn terminate_process(pid: int) {
    pcb = get_process(pid)
    if pcb == null {
        error("Process not found")
    }
    
    # Clean up resources
    free_memory(pcb.memory_info)
    cleanup_process_resources(pcb)
    
    # Update state
    pcb.state = ProcessState.TERMINATED
    
    # Remove from process table
    remove_from_process_table(pid)
    
    # Notify parent
    if pcb.parent_pid != null {
        notify_parent(pcb.parent_pid, pid)
    }
}

fn suspend_process(pid: int) {
    pcb = get_process(pid)
    if pcb == null {
        error("Process not found")
    }
    
    # Save process state
    save_process_state(pcb)
    
    # Update state
    pcb.state = ProcessState.WAITING
    
    # Schedule next process
    schedule_next_process()
}

fn resume_process(pid: int) {
    pcb = get_process(pid)
    if pcb == null {
        error("Process not found")
    }
    
    # Restore process state
    restore_process_state(pcb)
    
    # Update state
    pcb.state = ProcessState.READY
    
    # Add to ready queue
    add_to_ready_queue(pid)
}

fn get_process_info(pid: int) -> PCB {
    pcb = get_process(pid)
    if pcb == null {
        error("Process not found")
    }
    return pcb
}

fn set_process_priority(pid: int, priority: int) {
    pcb = get_process(pid)
    if pcb == null {
        error("Process not found")
    }
    
    pcb.priority = priority
    update_scheduler_queues(pcb)
}

# Process Scheduling Functions
fn schedule_next_process() {
    # Get highest priority ready process
    next_pcb = get_next_process()
    if next_pcb == null {
        return
    }
    
    # Save current process state
    current = get_current_process()
    if current != null {
        save_process_state(current)
        current.state = ProcessState.READY
    }
    
    # Switch to next process
    next_pcb.state = ProcessState.RUNNING
    restore_process_state(next_pcb)
    context_switch(next_pcb)
}

fn yield_cpu() {
    # Voluntarily give up CPU
    current = get_current_process()
    if current != null {
        current.state = ProcessState.READY
        schedule_next_process()
    }
}

# Helper Functions
fn generate_pid() -> int {
    # Generate unique process ID
    return next_available_pid()
}

fn default_priority() -> int {
    return 10  # Default normal priority
}

fn allocate_memory() -> MemoryInfo {
    # Allocate memory for new process
    return MemoryInfo {
        base_address: get_free_memory_region(),
        size: default_process_size(),
        permissions: default_permissions(),
        mapped_files: []
    }
}

fn initialize_process_state(pcb: PCB, args: List[String]) {
    # Set up initial process state
    setup_stack(pcb)
    setup_heap(pcb)
    initialize_registers(pcb)
    setup_arguments(pcb, args)
}

fn cleanup_process_resources(pcb: PCB) {
    # Clean up process resources
    close_open_files(pcb)
    free_kernel_resources(pcb)
    cleanup_ipc_resources(pcb)
}
