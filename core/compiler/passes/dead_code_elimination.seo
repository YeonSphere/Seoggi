// Dead Code Elimination Pass
// Eliminates unused code while preserving program semantics and safety

import { Error } from "../error"
import { Module } from "../ir/module"
import { Function } from "../ir/function"
import { BasicBlock } from "../ir/basic_block"
import { Instruction } from "../ir/instruction"
import { Value } from "../ir/value"
import { Context } from "../context"
import { Safety } from "../../safety/constraints"
import { Pass } from "./pass_manager"

struct DeadCodeElimination : Pass {
    context: Context
    safety_checker: Safety.Checker
    
    // Constructor
    new(context: Context) -> DeadCodeElimination {
        DeadCodeElimination {
            name: "dead_code_elimination",
            context,
            safety_checker: Safety.Checker::new()
        }
    }
    
    // Pass interface implementation
    impl Pass for DeadCodeElimination {
        fn run_on_module(module: Module) -> Result<bool, Error> {
            let mut modified = false
            
            // Process each function
            for function in module.functions() {
                modified |= self.run_on_function(function)?
            }
            
            Ok(modified)
        }
        
        fn run_on_function(function: Function) -> Result<bool, Error> {
            let mut modified = false
            
            // Build use-def chains
            let mut use_def = self.build_use_def_chains(function)?
            
            // Iterate until no more changes
            loop {
                let prev_modified = modified
                
                // Find and remove dead instructions
                for block in function.blocks() {
                    modified |= self.eliminate_dead_instructions(block, &mut use_def)?
                }
                
                // Find and remove dead blocks
                modified |= self.eliminate_dead_blocks(function)?
                
                if !modified || modified == prev_modified {
                    break
                }
            }
            
            Ok(modified)
        }
        
        fn requires() -> Vec<string> {
            vec![] // No dependencies
        }
        
        fn invalidates() -> Vec<string> {
            vec!["dominator_tree", "control_flow_graph"]
        }
        
        fn verify_safety(context: Context) -> Result<(), Error> {
            // Verify that elimination preserves program semantics
            self.safety_checker.verify_all(context)
        }
    }
    
    // Dead instruction elimination
    fn eliminate_dead_instructions(
        &mut self,
        block: BasicBlock,
        use_def: &mut HashMap<Value, Vec<Value>>
    ) -> Result<bool, Error> {
        let mut modified = false
        let mut dead_insts = Vec::new()
        
        // Find dead instructions
        for inst in block.instructions() {
            if self.is_dead_instruction(inst, use_def)? {
                dead_insts.push(inst)
            }
        }
        
        // Remove dead instructions
        for inst in dead_insts {
            // Verify safety of removal
            self.verify_safe_to_remove(inst)?
            
            // Remove instruction and update use-def chains
            block.remove_instruction(inst)?
            self.update_use_def_chains(inst, use_def)?
            modified = true
        }
        
        Ok(modified)
    }
    
    // Dead block elimination
    fn eliminate_dead_blocks(&mut self, function: Function) -> Result<bool, Error> {
        let mut modified = false
        let mut reachable = HashSet::new()
        
        // Find reachable blocks
        self.find_reachable_blocks(function.entry_block(), &mut reachable)?
        
        // Remove unreachable blocks
        let mut dead_blocks = Vec::new()
        for block in function.blocks() {
            if !reachable.contains(block.name()) {
                dead_blocks.push(block)
            }
        }
        
        // Remove dead blocks
        for block in dead_blocks {
            // Verify safety of removal
            self.verify_safe_to_remove_block(block)?
            
            function.remove_block(block)?
            modified = true
        }
        
        Ok(modified)
    }
    
    // Use-def chain analysis
    fn build_use_def_chains(&self, function: Function) -> Result<HashMap<Value, Vec<Value>>, Error> {
        let mut use_def = HashMap::new()
        
        for block in function.blocks() {
            for inst in block.instructions() {
                // Add instruction result to use-def chains
                let result = inst.result()
                if let Some(val) = result {
                    use_def.insert(val, Vec::new())
                }
                
                // Add operands to use-def chains
                for operand in inst.operands() {
                    if let Some(users) = use_def.get_mut(&operand) {
                        users.push(result.unwrap())
                    }
                }
            }
        }
        
        Ok(use_def)
    }
    
    fn update_use_def_chains(
        &self,
        inst: Instruction,
        use_def: &mut HashMap<Value, Vec<Value>>
    ) -> Result<(), Error> {
        // Remove instruction result from use-def chains
        if let Some(result) = inst.result() {
            use_def.remove(&result)
        }
        
        // Update operand uses
        for operand in inst.operands() {
            if let Some(users) = use_def.get_mut(&operand) {
                users.retain(|&user| user != inst.result().unwrap())
            }
        }
        
        Ok(())
    }
    
    // Helper methods
    fn is_dead_instruction(
        &self,
        inst: Instruction,
        use_def: &HashMap<Value, Vec<Value>>
    ) -> Result<bool, Error> {
        // Instructions with side effects are never dead
        if inst.has_side_effects() {
            return Ok(false)
        }
        
        // Check if instruction result is unused
        match inst.result() {
            Some(val) => {
                match use_def.get(&val) {
                    Some(users) => Ok(users.is_empty()),
                    None => Ok(true)
                }
            },
            None => Ok(false)
        }
    }
    
    fn find_reachable_blocks(
        &self,
        start: BasicBlock,
        reachable: &mut HashSet<string>
    ) -> Result<(), Error> {
        let name = start.name()
        if reachable.contains(name) {
            return Ok(())
        }
        
        reachable.insert(name.clone())
        
        // Recursively process successors
        for succ in start.successors() {
            self.find_reachable_blocks(succ, reachable)?
        }
        
        Ok(())
    }
    
    // Safety verification
    fn verify_safe_to_remove(&self, inst: Instruction) -> Result<(), Error> {
        // Verify no critical side effects
        if inst.has_critical_side_effects() {
            return Err(Error::UnsafeElimination(inst))
        }
        
        // Verify no memory safety violations
        self.safety_checker.verify_instruction_removal(inst)?
        
        Ok(())
    }
    
    fn verify_safe_to_remove_block(&self, block: BasicBlock) -> Result<(), Error> {
        // Verify all instructions can be safely removed
        for inst in block.instructions() {
            self.verify_safe_to_remove(inst)?
        }
        
        // Verify no critical control flow
        if block.has_critical_control_flow() {
            return Err(Error::UnsafeBlockElimination(block))
        }
        
        Ok(())
    }
}