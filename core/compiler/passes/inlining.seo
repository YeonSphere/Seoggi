// Function Inlining Pass
// Inlines function calls with comprehensive safety checks

import { Error } from "../error"
import { Module } from "../ir/module"
import { Function } from "../ir/function"
import { BasicBlock } from "../ir/basic_block"
import { Instruction } from "../ir/instruction"
import { Value } from "../ir/value"
import { Type } from "../ir/type"
import { Context } from "../context"
import { Safety } from "../../safety/constraints"
import { Pass } from "./pass_manager"

struct Inliner : Pass {
    context: Context
    safety_checker: Safety.Checker
    size_threshold: u32
    
    // Constructor
    new(context: Context, size_threshold: u32) -> Inliner {
        Inliner {
            name: "inlining",
            context,
            safety_checker: Safety.Checker::new(),
            size_threshold
        }
    }
    
    // Pass interface implementation
    impl Pass for Inliner {
        fn run_on_module(module: Module) -> Result<bool, Error> {
            let mut modified = false
            
            // Build call graph
            let call_graph = self.build_call_graph(module)?
            
            // Process each function
            for function in module.functions() {
                modified |= self.run_on_function(function, &call_graph)?
            }
            
            Ok(modified)
        }
        
        fn run_on_function(function: Function, call_graph: &CallGraph) -> Result<bool, Error> {
            let mut modified = false
            
            // Find inlinable calls
            let mut inline_candidates = Vec::new()
            for block in function.blocks() {
                for inst in block.instructions() {
                    if let Some(callee) = self.get_inlinable_call(inst, call_graph)? {
                        inline_candidates.push((block, inst, callee))
                    }
                }
            }
            
            // Perform inlining
            for (block, call_inst, callee) in inline_candidates {
                // Verify safety of inlining
                self.verify_safe_to_inline(call_inst, callee)?
                
                // Perform inlining
                self.inline_function(block, call_inst, callee)?
                modified = true
            }
            
            Ok(modified)
        }
        
        fn requires() -> Vec<string> {
            vec!["dominator_tree"]
        }
        
        fn invalidates() -> Vec<string> {
            vec!["control_flow_graph", "dominator_tree", "loop_info"]
        }
        
        fn verify_safety(context: Context) -> Result<(), Error> {
            // Verify that inlining preserves program semantics
            self.safety_checker.verify_all(context)
        }
    }
    
    // Call graph analysis
    struct CallGraph {
        calls: HashMap<Function, Vec<Function>>,
        recursive: HashSet<Function>
    }
    
    fn build_call_graph(&self, module: Module) -> Result<CallGraph, Error> {
        let mut graph = CallGraph {
            calls: HashMap::new(),
            recursive: HashSet::new()
        }
        
        // Build initial call graph
        for function in module.functions() {
            let mut callees = Vec::new()
            
            for block in function.blocks() {
                for inst in block.instructions() {
                    if let Some(callee) = self.get_called_function(inst) {
                        callees.push(callee)
                    }
                }
            }
            
            graph.calls.insert(function, callees)
        }
        
        // Find recursive functions
        self.find_recursive_functions(&mut graph)?
        
        Ok(graph)
    }
    
    fn find_recursive_functions(&self, graph: &mut CallGraph) -> Result<(), Error> {
        // Use Tarjan's algorithm to find strongly connected components
        let mut index = 0
        let mut stack = Vec::new()
        let mut indices = HashMap::new()
        let mut lowlinks = HashMap::new()
        let mut on_stack = HashSet::new()
        
        for function in graph.calls.keys() {
            if !indices.contains_key(function) {
                self.strong_connect(
                    function,
                    graph,
                    &mut index,
                    &mut indices,
                    &mut lowlinks,
                    &mut stack,
                    &mut on_stack
                )?
            }
        }
        
        Ok(())
    }
    
    fn strong_connect(
        &self,
        function: Function,
        graph: &mut CallGraph,
        index: &mut u32,
        indices: &mut HashMap<Function, u32>,
        lowlinks: &mut HashMap<Function, u32>,
        stack: &mut Vec<Function>,
        on_stack: &mut HashSet<Function>
    ) -> Result<(), Error> {
        // Set depth index
        indices.insert(function, *index)
        lowlinks.insert(function, *index)
        *index += 1
        stack.push(function)
        on_stack.insert(function)
        
        // Consider successors
        if let Some(successors) = graph.calls.get(&function) {
            for &succ in successors {
                if !indices.contains_key(&succ) {
                    // Successor has not yet been visited
                    self.strong_connect(succ, graph, index, indices, lowlinks, stack, on_stack)?
                    
                    let succ_lowlink = lowlinks[&succ]
                    lowlinks.insert(function, min(lowlinks[&function], succ_lowlink))
                } else if on_stack.contains(&succ) {
                    // Successor is in current SCC
                    lowlinks.insert(function, min(lowlinks[&function], indices[&succ]))
                }
            }
        }
        
        // Check if function is root of SCC
        if lowlinks[&function] == indices[&function] {
            // Found an SCC
            let mut scc = Vec::new()
            loop {
                let w = stack.pop().unwrap()
                on_stack.remove(&w)
                scc.push(w)
                if w == function {
                    break
                }
            }
            
            // If SCC has more than one node or self-loop, mark as recursive
            if scc.len() > 1 || graph.calls[&function].contains(&function) {
                for f in scc {
                    graph.recursive.insert(f)
                }
            }
        }
        
        Ok(())
    }
    
    // Inlining implementation
    fn inline_function(
        &mut self,
        block: BasicBlock,
        call_inst: Instruction,
        callee: Function
    ) -> Result<(), Error> {
        // Create entry and exit blocks for inlined code
        let entry_block = block.split_at(call_inst)?
        let exit_block = BasicBlock::new("inline_exit")
        
        // Clone callee blocks
        let mut value_map = HashMap::new()
        let cloned_blocks = self.clone_function_body(callee, &mut value_map)?
        
        // Map arguments to parameters
        self.map_arguments(call_inst, callee, &mut value_map)?
        
        // Insert cloned blocks
        for cloned_block in cloned_blocks {
            block.function().add_block(cloned_block)?
        }
        
        // Connect blocks
        self.connect_inlined_blocks(entry_block, exit_block, cloned_blocks[0], value_map)?
        
        // Update PHI nodes
        self.update_phi_nodes(block.function(), value_map)?
        
        Ok(())
    }
    
    fn clone_function_body(
        &self,
        function: Function,
        value_map: &mut HashMap<Value, Value>
    ) -> Result<Vec<BasicBlock>, Error> {
        let mut cloned_blocks = Vec::new()
        
        for block in function.blocks() {
            let cloned_block = BasicBlock::new(&format!("inline_{}", block.name()))
            
            // Clone instructions
            for inst in block.instructions() {
                let cloned_inst = inst.clone_with_mappings(value_map)?
                cloned_block.add_instruction(cloned_inst)?
            }
            
            cloned_blocks.push(cloned_block)
        }
        
        Ok(cloned_blocks)
    }
    
    fn map_arguments(
        &self,
        call_inst: Instruction,
        callee: Function,
        value_map: &mut HashMap<Value, Value>
    ) -> Result<(), Error> {
        if let Instruction::Call { args, .. } = call_inst {
            for (param, arg) in callee.parameters().iter().zip(args.iter()) {
                value_map.insert(param.clone(), arg.clone())
            }
        }
        
        Ok(())
    }
    
    fn connect_inlined_blocks(
        &self,
        entry_block: BasicBlock,
        exit_block: BasicBlock,
        first_inlined_block: BasicBlock,
        value_map: HashMap<Value, Value>
    ) -> Result<(), Error> {
        // Connect entry to first inlined block
        entry_block.add_successor(first_inlined_block)?
        
        // Redirect returns to exit block
        for block in first_inlined_block.function().blocks() {
            for inst in block.instructions() {
                if let Instruction::Return { value } = inst {
                    // Replace return with branch to exit
                    let branch = Instruction::Branch { target: exit_block }
                    block.replace_instruction(inst, branch)?
                    
                    // Store return value if any
                    if let Some(val) = value {
                        let mapped_val = value_map.get(&val).unwrap_or(&val)
                        exit_block.add_phi_input(mapped_val.clone())?
                    }
                }
            }
        }
        
        Ok(())
    }
    
    // Helper methods
    fn get_inlinable_call(
        &self,
        inst: Instruction,
        call_graph: &CallGraph
    ) -> Result<Option<Function>, Error> {
        if let Instruction::Call { func, .. } = inst {
            // Check if function is suitable for inlining
            if self.should_inline(func, call_graph)? {
                return Ok(Some(func))
            }
        }
        
        Ok(None)
    }
    
    fn should_inline(
        &self,
        function: Function,
        call_graph: &CallGraph
    ) -> Result<bool, Error> {
        // Don't inline recursive functions
        if call_graph.recursive.contains(&function) {
            return Ok(false)
        }
        
        // Don't inline if too large
        if function.size() > self.size_threshold {
            return Ok(false)
        }
        
        // Don't inline functions with unsafe operations
        if function.has_unsafe_operations() {
            return Ok(false)
        }
        
        Ok(true)
    }
    
    // Safety verification
    fn verify_safe_to_inline(
        &self,
        call_inst: Instruction,
        callee: Function
    ) -> Result<(), Error> {
        // Verify no critical side effects
        if callee.has_critical_side_effects() {
            return Err(Error::UnsafeInlining(callee))
        }
        
        // Verify memory safety
        self.safety_checker.verify_function_inlining(callee)?
        
        // Verify exception safety
        if !self.context.exceptions_enabled && callee.may_throw() {
            return Err(Error::UnsafeExceptionHandling(callee))
        }
        
        Ok(())
    }
}