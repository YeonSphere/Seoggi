// YeonSphere Universal Open Source License (YUOSL)
// Copyright (c) 2024 Jeremy Matlock (@daedaevibin)
// All rights reserved.

// Main compiler driver

// Compiler options
struct CompilerOptions {
    target: Target
    opt_level: u32
    debug_info: bool
    output_type: OutputType
}

// Output types
enum OutputType {
    Executable,
    SharedLib,
    StaticLib,
    Object
}

// Main compiler struct
struct Compiler {
    options: CompilerOptions
    
    // Create new compiler with options
    fn new(options: CompilerOptions) -> Compiler {
        Compiler { options }
    }
    
    // Compile source file to machine code
    fn compile(&mut self, source_file: String) -> Result<Vec<u8>, Error> {
        // Read source file
        let source = std::fs::read_to_string(source_file)?;
        
        // Create tokenizer
        let mut tokenizer = Tokenizer::new(source);
        
        // Generate token stream
        let mut tokens = tokenizer.tokenize()?;
        
        // Create IR generator
        let mut ir_gen = IRGenerator::new("module");
        
        // Generate IR
        let ir_module = ir_gen.generate(&mut tokens)?;
        
        // Create code generator for target
        let mut code_gen = CodeGenerator::new(self.options.target);
        
        // Generate machine code
        let code = code_gen.generate(ir_module)?;
        
        Ok(code)
    }
    
    // Compile multiple source files
    fn compile_all(&mut self, sources: Vec<String>) -> Result<Vec<Vec<u8>>, Error> {
        let mut outputs = Vec::new();
        
        for source in sources {
            outputs.push(self.compile(source)?);
        }
        
        Ok(outputs)
    }
    
    // Link object files into final output
    fn link(&mut self, objects: Vec<Vec<u8>>) -> Result<Vec<u8>, Error> {
        match self.options.output_type {
            OutputType::Executable => self.link_executable(objects),
            OutputType::SharedLib => self.link_shared_lib(objects),
            OutputType::StaticLib => self.link_static_lib(objects),
            OutputType::Object => {
                if objects.len() != 1 {
                    Err(Error::new("Cannot output multiple objects as single object file"))
                } else {
                    Ok(objects[0].clone())
                }
            }
        }
    }
    
    // Link executable
    fn link_executable(&mut self, objects: Vec<Vec<u8>>) -> Result<Vec<u8>, Error> {
        match self.options.target {
            Target::X86_64 => self.link_elf_executable(objects),
            Target::ARM64 => self.link_macho_executable(objects),
            Target::RISCV64 => self.link_elf_executable(objects),
            Target::WebAssembly => self.link_wasm_module(objects)
        }
    }
    
    // Link shared library
    fn link_shared_lib(&mut self, objects: Vec<Vec<u8>>) -> Result<Vec<u8>, Error> {
        match self.options.target {
            Target::X86_64 => self.link_elf_shared(objects),
            Target::ARM64 => self.link_macho_shared(objects),
            Target::RISCV64 => self.link_elf_shared(objects),
            Target::WebAssembly => Err(Error::new("Shared libraries not supported for WebAssembly"))
        }
    }
    
    // Link static library
    fn link_static_lib(&mut self, objects: Vec<Vec<u8>>) -> Result<Vec<u8>, Error> {
        // Create archive
        let mut archive = Vec::new();
        
        // Write archive header
        archive.extend_from_slice(b"!<arch>\n");
        
        // Write each object file
        for object in objects {
            // Write file header
            let header = format!(
                "{:<16}{:<12}{:<6}{:<6}{:<8}{:<10}`\n",
                "member.o/",
                "0",
                "0",
                "0",
                format!("{}", object.len()),
                "`"
            );
            archive.extend_from_slice(header.as_bytes());
            
            // Write file data
            archive.extend_from_slice(&object);
            
            // Pad to even length
            if object.len() % 2 != 0 {
                archive.push(b'\n');
            }
        }
        
        Ok(archive)
    }
    
    // Target-specific linking
    fn link_elf_executable(&mut self, objects: Vec<Vec<u8>>) -> Result<Vec<u8>, Error> {
        // Create ELF header
        let mut output = Vec::new();
        output.extend_from_slice(&[
            0x7f, b'E', b'L', b'F',  // Magic
            2, 1, 1, 0,              // Class, Data, Version, OS ABI
            0, 0, 0, 0, 0, 0, 0, 0,  // Padding
            2, 0,                    // Type (Executable)
            0x3e, 0,                 // Machine (x86-64)
            1, 0, 0, 0,             // Version
            0, 0, 0, 0, 0, 0, 0, 0,  // Entry point (to be filled)
            0, 0, 0, 0, 0, 0, 0, 0,  // Program header offset
            0, 0, 0, 0, 0, 0, 0, 0   // Section header offset
        ]);
        
        // Merge objects
        for object in objects {
            self.merge_elf_sections(&mut output, &object)?;
        }
        
        // Update offsets
        self.update_elf_offsets(&mut output)?;
        
        Ok(output)
    }
    
    // Merge ELF sections from object into output
    fn merge_elf_sections(&mut self, output: &mut Vec<u8>, object: &[u8]) -> Result<(), Error> {
        // Read object file sections
        let sections = self.read_elf_sections(object)?;
        
        // Merge each section
        for section in sections {
            match section.type {
                SectionType::Text => {
                    // Merge code
                    let offset = output.len();
                    output.extend_from_slice(&section.data);
                    
                    // Update relocations
                    for reloc in section.relocations {
                        self.update_elf_relocation(output, offset, &reloc)?;
                    }
                }
                SectionType::Data => {
                    // Merge data
                    output.extend_from_slice(&section.data);
                }
                SectionType::BSS => {
                    // Add BSS size
                    let size = section.data.len();
                    output.extend(vec![0; size]);
                }
                SectionType::Rodata => {
                    // Merge read-only data
                    output.extend_from_slice(&section.data);
                }
            }
        }
        
        Ok(())
    }
}
