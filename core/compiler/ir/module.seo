use std::collections::HashMap;
use crate::ir::function::Function;
use crate::ir::type::Type;
use crate::ir::value::Value;

pub struct Module {
    name: String,
    functions: HashMap<String, Function>,
    global_variables: HashMap<String, Value>,
    types: HashMap<String, Type>,
    quantum_registers: HashMap<String, QuantumRegister>,
    ai_models: HashMap<String, AIModel>,
    source_file: String,
}

impl Module {
    pub fn new(name: String, source_file: String) -> Self {
        Module {
            name,
            functions: HashMap::new(),
            global_variables: HashMap::new(),
            types: HashMap::new(),
            quantum_registers: HashMap::new(),
            ai_models: HashMap::new(),
            source_file,
        }
    }

    pub fn add_function(&mut self, function: Function) {
        self.functions.insert(function.name().to_string(), function);
    }

    pub fn add_global_variable(&mut self, name: String, value: Value) {
        self.global_variables.insert(name, value);
    }

    pub fn add_type(&mut self, name: String, ty: Type) {
        self.types.insert(name, ty);
    }

    pub fn add_quantum_register(&mut self, name: String, register: QuantumRegister) {
        self.quantum_registers.insert(name, register);
    }

    pub fn add_ai_model(&mut self, name: String, model: AIModel) {
        self.ai_models.insert(name, model);
    }

    pub fn get_function(&self, name: &str) -> Option<&Function> {
        self.functions.get(name)
    }

    pub fn get_global_variable(&self, name: &str) -> Option<&Value> {
        self.global_variables.get(name)
    }

    pub fn get_type(&self, name: &str) -> Option<&Type> {
        self.types.get(name)
    }

    pub fn get_quantum_register(&self, name: &str) -> Option<&QuantumRegister> {
        self.quantum_registers.get(name)
    }

    pub fn get_ai_model(&self, name: &str) -> Option<&AIModel> {
        self.ai_models.get(name)
    }

    pub fn verify(&self) -> Result<(), String> {
        // Verify all functions
        for function in self.functions.values() {
            function.verify()?;
        }

        // Verify quantum register consistency
        for register in self.quantum_registers.values() {
            register.verify_state()?;
        }

        // Verify AI model safety
        for model in self.ai_models.values() {
            model.verify_safety()?;
        }

        Ok(())
    }

    pub fn optimize(&mut self, optimization_level: OptimizationLevel) {
        let pass_manager = PassManager::new(optimization_level);
        pass_manager.run(self);
    }

    pub fn to_llvm(&self) -> LLVMModule {
        let mut llvm_module = LLVMModule::new(&self.name);
        
        // Convert functions to LLVM IR
        for function in self.functions.values() {
            llvm_module.add_function(function.to_llvm());
        }

        // Convert global variables
        for (name, value) in &self.global_variables {
            llvm_module.add_global(name, value.to_llvm());
        }

        llvm_module
    }

    pub fn to_wasm(&self) -> WASMModule {
        let mut wasm_module = WASMModule::new(&self.name);
        
        // Convert functions to WASM
        for function in self.functions.values() {
            wasm_module.add_function(function.to_wasm());
        }

        // Convert global variables
        for (name, value) in &self.global_variables {
            wasm_module.add_global(name, value.to_wasm());
        }

        wasm_module
    }

    pub fn to_js(&self) -> String {
        let mut js_code = String::new();
        
        // Convert functions to JavaScript
        for function in self.functions.values() {
            js_code.push_str(&function.to_js());
            js_code.push_str("\n\n");
        }

        // Convert global variables
        for (name, value) in &self.global_variables {
            js_code.push_str(&format!("const {} = {};\n", name, value.to_js()));
        }

        js_code
    }
}