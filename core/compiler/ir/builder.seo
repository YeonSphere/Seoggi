// Seoggi IR Builder
// Provides a high-level interface for constructing IR with zero-cost abstractions

import { Error } from "../error"
import { Type, TypeRegistry } from "./type"
import { Value } from "./value"
import { Module } from "./module"
import { Function } from "./function"
import { BasicBlock } from "./basic_block"
import { Instruction } from "./instruction"
import { Context } from "../context"
import { Safety } from "../../safety/constraints"

// IR Builder - Main interface for constructing IR
struct IRBuilder {
    context: Context
    module: Module
    current_function: Option<Function>
    current_block: Option<BasicBlock>
    type_registry: TypeRegistry
    safety_checker: Safety.Checker
    
    // Constructor
    new(context: Context) -> IRBuilder {
        IRBuilder {
            context,
            module: Module::new(),
            current_function: None,
            current_block: None,
            type_registry: TypeRegistry::new(),
            safety_checker: Safety.Checker::new()
        }
    }
    
    // Module-level operations
    fn create_module(name: string) -> Result<Module, Error> {
        self.module = Module::new(name)
        Ok(self.module)
    }
    
    // Function creation and management
    fn create_function(&mut self, name: string, type: FunctionType) -> Result<Function, Error> {
        // Verify function type
        type.verify(self.context)?
        
        // Create function
        let function = Function::new(name, type)
        self.module.add_function(function.clone())?
        self.current_function = Some(function.clone())
        
        // Create entry block
        let entry = self.create_block("entry")?
        self.set_insert_point(entry)
        
        Ok(function)
    }
    
    fn set_current_function(&mut self, function: Function) {
        self.current_function = Some(function)
        self.current_block = None // Reset block pointer
    }
    
    // Basic block operations
    fn create_block(&mut self, name: string) -> Result<BasicBlock, Error> {
        match &mut self.current_function {
            Some(f) => {
                let block = BasicBlock::new(name)
                f.add_block(block.clone())?
                Ok(block)
            },
            None => Err(Error::NoCurrentFunction)
        }
    }
    
    fn set_insert_point(&mut self, block: BasicBlock) {
        self.current_block = Some(block)
    }
    
    // Instruction building
    fn build_alloca(&mut self, type: Type, name: string) -> Result<Value, Error> {
        let inst = Instruction::Alloca {
            type: type.clone(),
            name: name.clone()
        }
        self.insert_instruction(inst)
    }
    
    fn build_load(&mut self, ptr: Value, type: Type, name: string) -> Result<Value, Error> {
        // Verify memory safety
        self.safety_checker.check_memory_access(ptr, type)?
        
        let inst = Instruction::Load {
            ptr,
            type,
            name
        }
        self.insert_instruction(inst)
    }
    
    fn build_store(&mut self, value: Value, ptr: Value) -> Result<(), Error> {
        // Verify memory safety and types
        self.safety_checker.check_memory_access(ptr, value.type())?
        if !value.type().is_compatible_with(ptr.type().pointee_type()) {
            return Err(Error::TypeMismatch(value.type(), ptr.type().pointee_type()))
        }
        
        let inst = Instruction::Store {
            value,
            ptr
        }
        self.insert_instruction(inst)?;
        Ok(())
    }
    
    fn build_call(&mut self, func: Function, args: Vec<Value>, name: string) -> Result<Value, Error> {
        // Verify function type and arguments
        let func_type = func.type()
        if args.len() != func_type.params.len() {
            return Err(Error::ArgumentCountMismatch)
        }
        
        for (arg, param_type) in args.iter().zip(func_type.params.iter()) {
            if !arg.type().is_compatible_with(param_type) {
                return Err(Error::TypeMismatch(arg.type(), param_type.clone()))
            }
        }
        
        let inst = Instruction::Call {
            func,
            args,
            name
        }
        self.insert_instruction(inst)
    }
    
    fn build_return(&mut self, value: Option<Value>) -> Result<(), Error> {
        match &self.current_function {
            Some(f) => {
                // Verify return type
                match value {
                    Some(v) => {
                        if !v.type().is_compatible_with(f.type().return_type) {
                            return Err(Error::TypeMismatch(v.type(), f.type().return_type))
                        }
                    },
                    None => {
                        if !f.type().return_type.is_void() {
                            return Err(Error::MissingReturnValue)
                        }
                    }
                }
                
                let inst = Instruction::Return { value }
                self.insert_instruction(inst)?;
                Ok(())
            },
            None => Err(Error::NoCurrentFunction)
        }
    }
    
    // Control flow
    fn build_branch(&mut self, target: BasicBlock) -> Result<(), Error> {
        let inst = Instruction::Branch {
            target
        }
        self.insert_instruction(inst)?;
        Ok(())
    }
    
    fn build_cond_branch(&mut self, cond: Value, then_block: BasicBlock, else_block: BasicBlock) -> Result<(), Error> {
        // Verify condition type
        if !cond.type().is_boolean() {
            return Err(Error::TypeMismatch(cond.type(), Type::Bool))
        }
        
        let inst = Instruction::CondBranch {
            condition: cond,
            then_block,
            else_block
        }
        self.insert_instruction(inst)?;
        Ok(())
    }
    
    // Arithmetic operations
    fn build_add(&mut self, lhs: Value, rhs: Value, name: string) -> Result<Value, Error> {
        self.build_binary_op(Instruction::Add, lhs, rhs, name)
    }
    
    fn build_sub(&mut self, lhs: Value, rhs: Value, name: string) -> Result<Value, Error> {
        self.build_binary_op(Instruction::Sub, lhs, rhs, name)
    }
    
    fn build_mul(&mut self, lhs: Value, rhs: Value, name: string) -> Result<Value, Error> {
        self.build_binary_op(Instruction::Mul, lhs, rhs, name)
    }
    
    fn build_div(&mut self, lhs: Value, rhs: Value, name: string) -> Result<Value, Error> {
        // Additional safety check for division by zero
        self.safety_checker.check_division(rhs)?
        self.build_binary_op(Instruction::Div, lhs, rhs, name)
    }
    
    // Helper methods
    fn build_binary_op(&mut self, op: fn(Value, Value) -> Instruction, lhs: Value, rhs: Value, name: string) -> Result<Value, Error> {
        // Verify operand types
        if !lhs.type().is_compatible_with(rhs.type()) {
            return Err(Error::TypeMismatch(lhs.type(), rhs.type()))
        }
        
        let inst = op(lhs, rhs)
        self.insert_instruction(inst)
    }
    
    fn insert_instruction(&mut self, inst: Instruction) -> Result<Value, Error> {
        match &mut self.current_block {
            Some(block) => {
                // Verify instruction
                inst.verify(self.context)?
                
                // Check safety constraints
                self.safety_checker.check_instruction(&inst)?
                
                // Add instruction to block
                let value = block.add_instruction(inst)?
                Ok(value)
            },
            None => Err(Error::NoCurrentBlock)
        }
    }
    
    // Type management
    fn register_type(&mut self, type: Type) -> Result<(), Error> {
        self.type_registry.register_type(type)
    }
    
    fn get_type(&self, name: string) -> Option<Type> {
        self.type_registry.get_type(name)
    }
    
    // Safety constraint management
    fn add_safety_constraint(&mut self, constraint: Safety.Constraint) {
        self.safety_checker.add_constraint(constraint)
    }
    
    // Verification
    fn verify(&self) -> Result<(), Error> {
        // Verify all types
        self.type_registry.verify_all(self.context)?
        
        // Verify module
        self.module.verify(self.context)?
        
        // Verify safety constraints
        self.safety_checker.verify_all(self.context)?
        
        Ok(())
    }
}