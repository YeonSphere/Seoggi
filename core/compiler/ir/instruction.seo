use crate::ir::value::Value;
use crate::ir::type::Type;

#[derive(Debug, Clone)]
pub enum Instruction {
    // Core Instructions
    Binary(BinaryOp, Value, Value),
    Unary(UnaryOp, Value),
    Call(String, Vec<Value>),
    Return(Option<Value>),
    Branch(Value, String, String), // condition, true_block, false_block
    Jump(String),                  // target_block
    Phi(PhiNode),
    Alloca(Type),
    Load(Value),
    Store(Value, Value),
    GetElementPtr(Value, Vec<Value>),
    Cast(CastOp, Value, Type),

    // Quantum Instructions
    QuantumAlloc(u32),                    // number of qubits
    QuantumFree(Value),
    QuantumGate(QuantumGate, Vec<Value>), // gate type and qubit operands
    QuantumMeasure(Value),
    QuantumReset(Value),
    QuantumBarrier(Vec<Value>),

    // AI Instructions
    AIModelLoad(String),              // model name
    AIModelPredict(Value, Value),     // model, input
    AIModelTrain(Value, Value),       // model, training_data
    AIModelSave(Value, String),       // model, path
    AITensorOp(TensorOp, Vec<Value>), // operation and tensor operands
    AIOptimize(Value, OptimizeOp),    // model, optimization parameters

    // Memory Management
    Malloc(Type, Value),  // type and size
    Free(Value),
    MemCpy(Value, Value, Value), // dest, src, size
    MemSet(Value, Value, Value), // dest, value, size

    // Parallel/Async
    Spawn(String, Vec<Value>),   // function name and arguments
    Join(Value),                 // thread handle
    Async(String, Vec<Value>),   // async function and arguments
    Await(Value),               // future
    Lock(Value),                // mutex
    Unlock(Value),              // mutex

    // Debug/Profiling
    DebugPrint(Value),
    ProfileStart(String),
    ProfileEnd(String),
}

#[derive(Debug, Clone)]
pub enum BinaryOp {
    Add, Sub, Mul, Div, Rem,
    And, Or, Xor,
    Shl, Shr,
    Eq, Ne, Lt, Le, Gt, Ge,
}

#[derive(Debug, Clone)]
pub enum UnaryOp {
    Neg, Not, BitNot,
}

#[derive(Debug, Clone)]
pub enum CastOp {
    Trunc, ZExt, SExt,
    FPTrunc, FPExt,
    FPToUI, FPToSI,
    UIToFP, SIToFP,
    BitCast,
}

#[derive(Debug, Clone)]
pub enum QuantumGate {
    H,      // Hadamard
    X,      // Pauli-X
    Y,      // Pauli-Y
    Z,      // Pauli-Z
    CNOT,   // Controlled-NOT
    CZ,     // Controlled-Z
    SWAP,   // SWAP
    T,      // T gate
    Tdg,    // T dagger
    S,      // S gate
    Sdg,    // S dagger
    RX,     // Rotation around X
    RY,     // Rotation around Y
    RZ,     // Rotation around Z
    U1,     // U1 gate
    U2,     // U2 gate
    U3,     // U3 gate
}

#[derive(Debug, Clone)]
pub enum TensorOp {
    MatMul,
    Add,
    Sub,
    Mul,
    Div,
    Transpose,
    Reshape,
    Concat,
    Split,
    Conv2D,
    MaxPool,
    AvgPool,
    BatchNorm,
    Dropout,
    Activation(ActivationType),
}

#[derive(Debug, Clone)]
pub enum ActivationType {
    ReLU,
    Sigmoid,
    Tanh,
    LeakyReLU,
    Softmax,
}

#[derive(Debug, Clone)]
pub enum OptimizeOp {
    SGD { learning_rate: f32 },
    Adam { learning_rate: f32, beta1: f32, beta2: f32 },
    RMSprop { learning_rate: f32, decay: f32 },
}

impl Instruction {
    pub fn is_terminator(&self) -> bool {
        matches!(self,
            Instruction::Return(_) |
            Instruction::Branch(_, _, _) |
            Instruction::Jump(_)
        )
    }

    pub fn verify(&self) -> Result<(), String> {
        match self {
            Instruction::Binary(op, lhs, rhs) => {
                // Verify operand types match the operation
                if !Self::verify_binary_types(op, lhs.get_type(), rhs.get_type()) {
                    return Err("Invalid types for binary operation".to_string());
                }
            }
            Instruction::QuantumGate(gate, qubits) => {
                // Verify qubit count matches gate requirements
                if !Self::verify_quantum_gate(gate, qubits) {
                    return Err("Invalid number of qubits for quantum gate".to_string());
                }
            }
            Instruction::AIModelPredict(model, input) => {
                // Verify model and input tensor compatibility
                if !Self::verify_ai_model_input(model, input) {
                    return Err("Invalid input tensor for AI model".to_string());
                }
            }
            // Add verification for other instructions...
            _ => {}
        }
        Ok(())
    }

    fn verify_binary_types(op: &BinaryOp, lhs_type: Type, rhs_type: Type) -> bool {
        match op {
            BinaryOp::Add | BinaryOp::Sub | BinaryOp::Mul | BinaryOp::Div => {
                lhs_type.is_numeric() && rhs_type.is_numeric() && lhs_type == rhs_type
            }
            BinaryOp::And | BinaryOp::Or | BinaryOp::Xor => {
                lhs_type.is_integral() && rhs_type.is_integral() && lhs_type == rhs_type
            }
            BinaryOp::Eq | BinaryOp::Ne => lhs_type == rhs_type,
            BinaryOp::Lt | BinaryOp::Le | BinaryOp::Gt | BinaryOp::Ge => {
                lhs_type.is_ordered() && rhs_type.is_ordered() && lhs_type == rhs_type
            }
            _ => true,
        }
    }

    fn verify_quantum_gate(gate: &QuantumGate, qubits: &[Value]) -> bool {
        match gate {
            QuantumGate::H | QuantumGate::X | QuantumGate::Y | QuantumGate::Z |
            QuantumGate::T | QuantumGate::Tdg | QuantumGate::S | QuantumGate::Sdg => {
                qubits.len() == 1
            }
            QuantumGate::CNOT | QuantumGate::CZ | QuantumGate::SWAP => {
                qubits.len() == 2
            }
            QuantumGate::RX | QuantumGate::RY | QuantumGate::RZ => {
                qubits.len() == 2 // qubit and rotation angle
            }
            QuantumGate::U1 => qubits.len() == 2,  // qubit and phase
            QuantumGate::U2 => qubits.len() == 3,  // qubit and two angles
            QuantumGate::U3 => qubits.len() == 4,  // qubit and three angles
        }
    }

    fn verify_ai_model_input(model: &Value, input: &Value) -> bool {
        if let (Type::AIModel(model_type), Type::Tensor(input_shape)) = (model.get_type(), input.get_type()) {
            model_type.verify_input_shape(&input_shape)
        } else {
            false
        }
    }

    pub fn to_llvm(&self) -> LLVMValue {
        match self {
            Instruction::Binary(op, lhs, rhs) => {
                let llvm_op = op.to_llvm_opcode();
                LLVMValue::create_binary_op(llvm_op, lhs.to_llvm(), rhs.to_llvm())
            }
            Instruction::Call(func_name, args) => {
                let llvm_args: Vec<_> = args.iter().map(|arg| arg.to_llvm()).collect();
                LLVMValue::create_call(func_name, &llvm_args)
            }
            // Handle other instructions...
            _ => unimplemented!("LLVM conversion not implemented for this instruction"),
        }
    }

    pub fn to_wasm(&self) -> Vec<WASMInstruction> {
        match self {
            Instruction::Binary(op, lhs, rhs) => {
                vec![
                    WASMInstruction::get_local(lhs.to_wasm_local()),
                    WASMInstruction::get_local(rhs.to_wasm_local()),
                    op.to_wasm_op(),
                ]
            }
            // Handle other instructions...
            _ => unimplemented!("WASM conversion not implemented for this instruction"),
        }
    }

    pub fn to_js(&self) -> String {
        match self {
            Instruction::Binary(op, lhs, rhs) => {
                format!("{} {} {}", lhs.to_js(), op.to_js_op(), rhs.to_js())
            }
            Instruction::Return(Some(value)) => {
                format!("return {};", value.to_js())
            }
            Instruction::Return(None) => "return;".to_string(),
            // Handle other instructions...
            _ => unimplemented!("JavaScript conversion not implemented for this instruction"),
        }
    }
}