use std::collections::HashMap;
use crate::ir::basic_block::BasicBlock;
use crate::ir::type::Type;
use crate::ir::value::Value;

pub struct Function {
    name: String,
    parameters: Vec<Parameter>,
    return_type: Type,
    basic_blocks: Vec<BasicBlock>,
    local_variables: HashMap<String, Value>,
    is_quantum: bool,
    is_ai: bool,
    attributes: FunctionAttributes,
}

pub struct Parameter {
    name: String,
    ty: Type,
    attributes: ParameterAttributes,
}

pub struct FunctionAttributes {
    is_public: bool,
    is_async: bool,
    is_pure: bool,
    is_inline: bool,
    optimization_level: OptimizationLevel,
    safety_level: SafetyLevel,
}

pub struct ParameterAttributes {
    is_mutable: bool,
    is_reference: bool,
    is_quantum: bool,
    is_ai: bool,
}

impl Function {
    pub fn new(
        name: String,
        parameters: Vec<Parameter>,
        return_type: Type,
        attributes: FunctionAttributes,
    ) -> Self {
        Function {
            name,
            parameters,
            return_type,
            basic_blocks: Vec::new(),
            local_variables: HashMap::new(),
            is_quantum: false,
            is_ai: false,
            attributes,
        }
    }

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn add_basic_block(&mut self, block: BasicBlock) {
        self.basic_blocks.push(block);
    }

    pub fn add_local_variable(&mut self, name: String, value: Value) {
        self.local_variables.insert(name, value);
    }

    pub fn verify(&self) -> Result<(), String> {
        // Verify basic blocks
        for block in &self.basic_blocks {
            block.verify()?;
        }

        // Verify control flow
        self.verify_control_flow()?;

        // Verify quantum operations if quantum function
        if self.is_quantum {
            self.verify_quantum_operations()?;
        }

        // Verify AI operations if AI function
        if self.is_ai {
            self.verify_ai_operations()?;
        }

        Ok(())
    }

    fn verify_control_flow(&self) -> Result<(), String> {
        // Verify that each block (except the last) ends with a terminator
        for block in &self.basic_blocks[..self.basic_blocks.len() - 1] {
            if !block.has_terminator() {
                return Err(format!("Basic block {} has no terminator", block.name()));
            }
        }

        // Verify that all referenced blocks exist
        let block_names: HashSet<_> = self.basic_blocks.iter()
            .map(|b| b.name())
            .collect();

        for block in &self.basic_blocks {
            for successor in block.successors() {
                if !block_names.contains(successor) {
                    return Err(format!("Reference to non-existent block {}", successor));
                }
            }
        }

        Ok(())
    }

    fn verify_quantum_operations(&self) -> Result<(), String> {
        // Verify quantum state consistency
        let mut quantum_state = QuantumState::new();
        
        for block in &self.basic_blocks {
            for instruction in block.instructions() {
                if let Instruction::Quantum(op) = instruction {
                    quantum_state.apply_operation(op)?;
                }
            }
        }

        quantum_state.verify_final_state()
    }

    fn verify_ai_operations(&self) -> Result<(), String> {
        // Verify AI model safety
        let mut ai_state = AIState::new();
        
        for block in &self.basic_blocks {
            for instruction in block.instructions() {
                if let Instruction::AI(op) = instruction {
                    ai_state.verify_operation(op)?;
                }
            }
        }

        ai_state.verify_safety()
    }

    pub fn to_llvm(&self) -> LLVMFunction {
        let mut llvm_function = LLVMFunction::new(&self.name);

        // Convert parameters
        for param in &self.parameters {
            llvm_function.add_parameter(param.to_llvm());
        }

        // Convert basic blocks
        for block in &self.basic_blocks {
            llvm_function.add_basic_block(block.to_llvm());
        }

        llvm_function
    }

    pub fn to_wasm(&self) -> WASMFunction {
        let mut wasm_function = WASMFunction::new(&self.name);

        // Convert parameters
        for param in &self.parameters {
            wasm_function.add_parameter(param.to_wasm());
        }

        // Convert basic blocks to WASM instructions
        for block in &self.basic_blocks {
            wasm_function.add_instructions(block.to_wasm());
        }

        wasm_function
    }

    pub fn to_js(&self) -> String {
        let mut js_code = String::new();

        // Function signature
        let params = self.parameters.iter()
            .map(|p| p.name.clone())
            .collect::<Vec<_>>()
            .join(", ");

        js_code.push_str(&format!("function {}({}) {{\n", self.name, params));

        // Convert basic blocks to JavaScript
        for block in &self.basic_blocks {
            js_code.push_str(&block.to_js());
            js_code.push_str("\n");
        }

        js_code.push_str("}\n");
        js_code
    }
}