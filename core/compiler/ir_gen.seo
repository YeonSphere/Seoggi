// YeonSphere Universal Open Source License (YUOSL)
// Copyright (c) 2024 Jeremy Matlock (@daedaevibin)
// All rights reserved.

// Direct IR generation without AST

// IR Operation types
enum IROp {
    // Memory operations
    Load, Store, Alloc, Free,
    
    // Arithmetic
    Add, Sub, Mul, Div,
    
    // Control flow
    Jump, Branch, Call, Return,
    
    // SIMD and vectorization
    VectorLoad, VectorStore,
    VectorAdd, VectorMul,
    
    // Hardware specific
    Fence, AtomicCAS, AtomicRMW,
    
    // Platform specific
    Syscall, Interrupt
}

// IR Type system
enum IRType {
    // Basic types
    I8, I16, I32, I64,
    U8, U16, U32, U64,
    F32, F64,
    Bool, Void,
    
    // Complex types
    Pointer(Box<IRType>),
    Array(Box<IRType>, usize),
    Vector(Box<IRType>, usize),
    
    // User defined types
    Struct(Vec<IRType>),
    Function(Vec<IRType>, Box<IRType>)
}

// IR Instruction
struct IRInst {
    op: IROp
    type: IRType
    operands: Vec<IRValue>
    result: Option<IRValue>
}

// IR Value represents a computed value
enum IRValue {
    Constant(i64),
    Float(f64),
    Register(u32),
    Memory(u32),
    Label(String)
}

// IR Basic Block
struct IRBlock {
    label: String
    instructions: Vec<IRInst>
    terminator: Option<IRInst>
}

// IR Function
struct IRFunction {
    name: String
    params: Vec<IRType>
    return_type: IRType
    blocks: Vec<IRBlock>
    locals: Vec<IRType>
}

// IR Module contains all functions and global data
struct IRModule {
    name: String
    functions: Vec<IRFunction>
    globals: Vec<(String, IRType)>
}

// IR Generator converts token stream directly to IR
struct IRGenerator {
    module: IRModule
    current_function: Option<IRFunction>
    current_block: Option<IRBlock>
    
    // Create new IR generator
    fn new(name: String) -> IRGenerator {
        IRGenerator {
            module: IRModule {
                name,
                functions: Vec::new(),
                globals: Vec::new()
            },
            current_function: None,
            current_block: None
        }
    }
    
    // Generate IR from token stream
    fn generate(&mut self, stream: &mut TokenStream) -> Result<IRModule, Error> {
        while !stream.is_at_end() {
            match stream.current().type {
                TokenType::Kernel => self.gen_kernel_module(stream)?,
                TokenType::Module => self.gen_module(stream)?,
                TokenType::Fn => self.gen_function(stream)?,
                TokenType::Let => self.gen_variable(stream)?,
                TokenType::Struct => self.gen_struct(stream)?,
                _ => return Err(Error::new("Unexpected top level token"))
            }
        }
        
        Ok(self.module)
    }
    
    // Generate kernel module
    fn gen_kernel_module(&mut self, stream: &mut TokenStream) -> Result<(), Error> {
        stream.expect(TokenType::Kernel)?;
        stream.expect(TokenType::Module)?;
        
        let name = stream.expect(TokenType::Identifier)?.value;
        stream.expect(TokenType::LBrace)?;
        
        // Set up kernel module context
        self.module.name = format!("kernel_{}", name);
        
        // Process kernel module body
        while !stream.current().matches(TokenType::RBrace) {
            match stream.current().type {
                TokenType::Unsafe => self.gen_unsafe_function(stream)?,
                TokenType::Fn => self.gen_function(stream)?,
                _ => return Err(Error::new("Unexpected token in kernel module"))
            }
        }
        
        stream.expect(TokenType::RBrace)?;
        Ok(())
    }
    
    // Generate unsafe function
    fn gen_unsafe_function(&mut self, stream: &mut TokenStream) -> Result<(), Error> {
        stream.expect(TokenType::Unsafe)?;
        
        // Create function with unsafe context
        let mut function = self.start_function(stream)?;
        function.name = format!("unsafe_{}", function.name);
        
        // Generate function body with direct hardware access
        self.gen_function_body(stream, &mut function)?;
        
        self.module.functions.push(function);
        Ok(())
    }
    
    // Start new function definition
    fn start_function(&mut self, stream: &mut TokenStream) -> Result<IRFunction, Error> {
        stream.expect(TokenType::Fn)?;
        let name = stream.expect(TokenType::Identifier)?.value;
        
        // Parse parameters
        stream.expect(TokenType::LParen)?;
        let mut params = Vec::new();
        
        while !stream.current().matches(TokenType::RParen) {
            let param_type = self.parse_type(stream)?;
            params.push(param_type);
            
            if !stream.current().matches(TokenType::RParen) {
                stream.expect(TokenType::Comma)?;
            }
        }
        
        stream.expect(TokenType::RParen)?;
        
        // Parse return type
        let return_type = if stream.current().matches(TokenType::Arrow) {
            stream.advance();
            self.parse_type(stream)?
        } else {
            IRType::Void
        };
        
        Ok(IRFunction {
            name,
            params,
            return_type,
            blocks: Vec::new(),
            locals: Vec::new()
        })
    }
    
    // Parse type from token stream
    fn parse_type(&mut self, stream: &mut TokenStream) -> Result<IRType, Error> {
        match stream.current().type {
            TokenType::Identifier => {
                let type_name = stream.expect(TokenType::Identifier)?.value;
                match type_name.as_str() {
                    "i8" => Ok(IRType::I8),
                    "i16" => Ok(IRType::I16),
                    "i32" => Ok(IRType::I32),
                    "i64" => Ok(IRType::I64),
                    "u8" => Ok(IRType::U8),
                    "u16" => Ok(IRType::U16),
                    "u32" => Ok(IRType::U32),
                    "u64" => Ok(IRType::U64),
                    "f32" => Ok(IRType::F32),
                    "f64" => Ok(IRType::F64),
                    "bool" => Ok(IRType::Bool),
                    _ => Err(Error::new(format!("Unknown type: {}", type_name)))
                }
            }
            TokenType::Star => {
                stream.advance();
                let inner = self.parse_type(stream)?;
                Ok(IRType::Pointer(Box::new(inner)))
            }
            TokenType::LBracket => {
                stream.advance();
                let inner = self.parse_type(stream)?;
                stream.expect(TokenType::Semicolon)?;
                let size = stream.expect(TokenType::Integer)?.as_int()?;
                stream.expect(TokenType::RBracket)?;
                Ok(IRType::Array(Box::new(inner), size as usize))
            }
            _ => Err(Error::new("Expected type"))
        }
    }
    
    // Generate instructions for expression
    fn gen_expr(&mut self, stream: &mut TokenStream) -> Result<IRValue, Error> {
        match stream.current().type {
            TokenType::Integer => {
                let value = stream.expect(TokenType::Integer)?.as_int()?;
                Ok(IRValue::Constant(value))
            }
            TokenType::Identifier => {
                let name = stream.expect(TokenType::Identifier)?.value;
                if stream.current().matches(TokenType::LParen) {
                    self.gen_call(stream, name)
                } else {
                    self.gen_variable_ref(name)
                }
            }
            TokenType::LParen => {
                stream.advance();
                let value = self.gen_expr(stream)?;
                stream.expect(TokenType::RParen)?;
                Ok(value)
            }
            _ => Err(Error::new("Expected expression"))
        }
    }
    
    // Generate function call
    fn gen_call(&mut self, stream: &mut TokenStream, name: String) -> Result<IRValue, Error> {
        stream.expect(TokenType::LParen)?;
        
        let mut args = Vec::new();
        while !stream.current().matches(TokenType::RParen) {
            args.push(self.gen_expr(stream)?);
            if !stream.current().matches(TokenType::RParen) {
                stream.expect(TokenType::Comma)?;
            }
        }
        
        stream.expect(TokenType::RParen)?;
        
        // Create call instruction
        let result = IRValue::Register(self.new_register());
        let inst = IRInst {
            op: IROp::Call,
            type: IRType::Void, // Will be updated with actual return type
            operands: args,
            result: Some(result.clone())
        };
        
        self.add_instruction(inst);
        Ok(result)
    }
    
    // Add instruction to current block
    fn add_instruction(&mut self, inst: IRInst) {
        if let Some(block) = &mut self.current_block {
            block.instructions.push(inst);
        }
    }
    
    // Generate new register
    fn new_register(&mut self) -> u32 {
        static mut NEXT_REG: u32 = 0;
        unsafe {
            NEXT_REG += 1;
            NEXT_REG
        }
    }
}
