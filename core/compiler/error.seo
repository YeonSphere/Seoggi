// Error handling for the Seoggi compiler

use std::fmt;
use std::error::Error as StdError;
use std::io;

#[derive(Debug)]
pub enum ErrorKind {
    // Lexical errors
    InvalidCharacter(char),
    UnterminatedString,
    UnterminatedComment,
    
    // Parsing errors
    UnexpectedToken { expected: String, found: String },
    UnexpectedEOF { expected: String },
    InvalidSyntax(String),
    
    // Type errors
    TypeMismatch { expected: String, found: String },
    UndefinedType(String),
    UndefinedVariable(String),
    UndefinedFunction(String),
    
    // Semantic errors
    InvalidQuantumOperation(String),
    InvalidAIOperation(String),
    SafetyViolation(String),
    ResourceLimitExceeded(String),
    
    // System errors
    IOError(io::Error),
    CompilerError(String),
    
    // Runtime errors
    QuantumStateError(String),
    AIModelError(String),
    
    // Other errors
    Other(String)
}

#[derive(Debug)]
pub struct Error {
    kind: ErrorKind,
    message: String,
    location: Option<Location>,
}

#[derive(Debug, Clone)]
pub struct Location {
    pub file: String,
    pub line: usize,
    pub column: usize,
}

impl Error {
    pub fn new(kind: ErrorKind, message: String, location: Option<Location>) -> Self {
        Error {
            kind,
            message,
            location,
        }
    }
    
    pub fn kind(&self) -> &ErrorKind {
        &self.kind
    }
    
    pub fn location(&self) -> Option<&Location> {
        self.location.as_ref()
    }
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if let Some(loc) = &self.location {
            write!(f, "Error at {}:{}:{}: {}", loc.file, loc.line, loc.column, self.message)
        } else {
            write!(f, "Error: {}", self.message)
        }
    }
}

impl StdError for Error {
    fn source(&self) -> Option<&(dyn StdError + 'static)> {
        match &self.kind {
            ErrorKind::IOError(err) => Some(err),
            _ => None,
        }
    }
}

impl From<io::Error> for Error {
    fn from(err: io::Error) -> Self {
        Error::new(
            ErrorKind::IOError(err),
            "IO error occurred".to_string(),
            None,
        )
    }
}

// Helper functions for error creation
pub fn type_error(expected: &str, found: &str, location: Option<Location>) -> Error {
    Error::new(
        ErrorKind::TypeMismatch {
            expected: expected.to_string(),
            found: found.to_string(),
        },
        format!("Type mismatch: expected {}, found {}", expected, found),
        location,
    )
}

pub fn quantum_error(message: &str, location: Option<Location>) -> Error {
    Error::new(
        ErrorKind::QuantumStateError(message.to_string()),
        format!("Quantum state error: {}", message),
        location,
    )
}

pub fn ai_error(message: &str, location: Option<Location>) -> Error {
    Error::new(
        ErrorKind::AIModelError(message.to_string()),
        format!("AI model error: {}", message),
        location,
    )
}

pub fn safety_error(message: &str, location: Option<Location>) -> Error {
    Error::new(
        ErrorKind::SafetyViolation(message.to_string()),
        format!("Safety violation: {}", message),
        location,
    )
}
