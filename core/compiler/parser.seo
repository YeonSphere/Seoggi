module Compiler::Parser {
    use Core::Types::{Result, ParserError, Position}
    use Core::Collections::{Vector, HashMap}
    use Compiler::Lexer::{Token, TokenType}
    use Compiler::AST::*
    use Core::System::{Effect, Visibility}

    type Parser {
        tokens: Vector<Token>,
        current: usize,
        had_error: bool,
        panic_mode: bool,
        errors: Vector<ParserError>,
        scope_level: u64,
        scope_id_counter: u64
    }

    impl Parser {
        // Initialize a new parser
        func new(tokens: Vector<Token>) -> Self {
            Parser {
                tokens: tokens,
                current: 0,
                had_error: false,
                panic_mode: false,
                errors: Vector::new(),
                scope_level: 0,
                scope_id_counter: 0
            }
        }

        // Main parsing function
        func parse(&mut self) -> Result<Program> {
            let mut program = Program::new();

            // Parse imports first
            while self.match_token(TokenType::Use) {
                match self.use_declaration() {
                    Ok(decl) => program.imports.push(decl),
                    Err(e) => {
                        self.errors.push(e);
                        self.synchronize();
                    }
                }
            }

            // Parse declarations
            while !self.is_at_end() {
                match self.declaration() {
                    Ok(decl) => {
                        if self.match_token(TokenType::Export) {
                            program.exports.push(ExportDecl {
                                item: Box::new(decl),
                                alias: if self.match_token(TokenType::As) {
                                    Some(self.consume(TokenType::Identifier, "Expected export alias")?.lexeme)
                                } else {
                                    None
                                }
                            });
                        } else {
                            program.declarations.push(decl);
                        }
                    },
                    Err(e) => {
                        self.errors.push(e);
                        self.synchronize();
                    }
                }
            }

            if self.had_error {
                Err(ParserError::MultipleErrors(self.errors.clone()))
            } else {
                Ok(program)
            }
        }

        // Declaration parsing
        func declaration(&mut self) -> Result<Declaration> {
            if self.match_token(TokenType::Module) {
                self.module_declaration()
            } else if self.match_token(TokenType::Class) {
                self.class_declaration()
            } else if self.match_token(TokenType::Trait) {
                self.trait_declaration()
            } else if self.match_token(TokenType::Interface) {
                self.interface_declaration()
            } else if self.match_token(TokenType::Function) {
                self.function_declaration()
            } else if self.match_token(TokenType::Let) || self.match_token(TokenType::Var) {
                self.variable_declaration()
            } else if self.match_token(TokenType::Type) {
                self.type_declaration()
            } else if self.match_token(TokenType::Effect) {
                self.effect_declaration()
            } else if self.match_token(TokenType::Import) {
                self.import_declaration()
            } else if self.match_token(TokenType::Export) {
                self.export_declaration()
            } else if self.match_token(TokenType::LinearType) {
                self.linear_type_declaration()
            } else if self.match_token(TokenType::Region) {
                self.region_declaration()
            } else if self.match_token(TokenType::Actor) {
                self.actor_declaration()
            } else if self.match_token(TokenType::Gate) {
                self.quantum_gate_declaration()
            } else if self.match_token(TokenType::Layer) {
                self.neural_layer_declaration()
            } else if self.match_token(TokenType::Safe) {
                self.safe_block_declaration()
            } else {
                self.statement()
            }
        }

        // Quantum gate parsing
        func quantum_gate_declaration(&mut self) -> Result<Declaration> {
            let name = self.consume(TokenType::Identifier, "Expected gate name")?;
            let params = self.parse_params()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before gate body")?;
            let transform_block = self.parse_transform_block()?;
            self.consume(TokenType::RightBrace, "Expected '}' after gate body")?;
            Ok(Declaration::QuantumGate(QuantumGateDecl {
                name: name.lexeme,
                params,
                transform_block,
            }))
        }

        // Transform block parsing
        func parse_transform_block(&mut self) -> Result<TransformBlock> {
            self.consume(TokenType::Transform, "Expected 'transform' keyword")?;
            let qubit_list = self.parse_qubit_list()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before transform body")?;
            let quantum_state_list = self.parse_quantum_state_list()?;
            self.consume(TokenType::RightBrace, "Expected '}' after transform body")?;
            Ok(TransformBlock {
                qubit_list,
                quantum_state_list,
            })
        }

        // Quantum state list parsing
        func parse_quantum_state_list(&mut self) -> Result<Vector<QuantumStateTransform>> {
            let mut list = Vector::new();
            while !self.check(TokenType::RightBrace) {
                list.push(self.parse_quantum_state_transform()?);
            }
            Ok(list)
        }

        // Quantum state transform parsing
        func parse_quantum_state_transform(&mut self) -> Result<QuantumStateTransform> {
            self.consume(TokenType::Bar, "Expected '|' character")?;
            let binary = self.consume(TokenType::Binary, "Expected binary literal")?;
            self.consume(TokenType::Rangle, "Expected '⟩' character")?;
            self.consume(TokenType::Arrow, "Expected '->' operator")?;
            let quantum_expression = self.parse_quantum_expression()?;
            Ok(QuantumStateTransform {
                binary: binary.lexeme,
                quantum_expression,
            })
        }

        // Quantum expression parsing
        func parse_quantum_expression(&mut self) -> Result<QuantumExpression> {
            let mut expr = self.parse_quantum_term()?;
            while self.match_token(TokenType::Plus) {
                let term = self.parse_quantum_term()?;
                expr = QuantumExpression::Add(Box::new(expr), Box::new(term));
            } else if self.match_token(TokenType::Minus) {
                let term = self.parse_quantum_term()?;
                expr = QuantumExpression::Sub(Box::new(expr), Box::new(term));
            }
            Ok(expr)
        }

        // Quantum term parsing
        func parse_quantum_term(&mut self) -> Result<QuantumExpression> {
            let mut term = self.parse_quantum_factor()?;
            while self.match_token(TokenType::Star) {
                let factor = self.parse_quantum_factor()?;
                term = QuantumExpression::Mul(Box::new(term), Box::new(factor));
            } else if self.match_token(TokenType::Slash) {
                let factor = self.parse_quantum_factor()?;
                term = QuantumExpression::Div(Box::new(term), Box::new(factor));
            }
            Ok(term)
        }

        // Quantum factor parsing
        func parse_quantum_factor(&mut self) -> Result<QuantumExpression> {
            if self.match_token(TokenType::ComplexNumber) {
                let complex_number = self.previous_token()?.lexeme;
                self.consume(TokenType::Bar, "Expected '|' character")?;
                let binary = self.consume(TokenType::Binary, "Expected binary literal")?;
                self.consume(TokenType::Rangle, "Expected '⟩' character")?;
                Ok(QuantumExpression::ComplexNumber(complex_number, binary))
            } else if self.match_token(TokenType::LeftParen) {
                let expr = self.parse_quantum_expression()?;
                self.consume(TokenType::RightParen, "Expected ')' character")?;
                Ok(expr)
            } else {
                Err(self.error("Expected quantum factor"))
            }
        }

        // Neural layer parsing
        func neural_layer_declaration(&mut self) -> Result<Declaration> {
            let name = self.consume(TokenType::Identifier, "Expected layer name")?;
            let params = self.parse_params()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before layer body")?;
            let forward_def = self.parse_forward_def()?;
            let backward_def = self.parse_backward_def()?;
            let weight_init = self.parse_weight_init()?;
            self.consume(TokenType::RightBrace, "Expected '}' after layer body")?;
            Ok(Declaration::NeuralLayer(NeuralLayerDecl {
                name: name.lexeme,
                params,
                forward_def,
                backward_def,
                weight_init,
            }))
        }

        // Forward definition parsing
        func parse_forward_def(&mut self) -> Result<ForwardDef> {
            self.consume(TokenType::Forward, "Expected 'forward' keyword")?;
            let params = self.parse_params()?;
            self.consume(TokenType::Arrow, "Expected '->' operator")?;
            let return_type = self.parse_type()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before forward body")?;
            let statement_list = self.parse_statement_list()?;
            self.consume(TokenType::RightBrace, "Expected '}' after forward body")?;
            Ok(ForwardDef {
                params,
                return_type,
                statement_list,
            })
        }

        // Backward definition parsing
        func parse_backward_def(&mut self) -> Result<BackwardDef> {
            self.consume(TokenType::Backward, "Expected 'backward' keyword")?;
            let params = self.parse_params()?;
            self.consume(TokenType::Arrow, "Expected '->' operator")?;
            let return_type = self.parse_type()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before backward body")?;
            let statement_list = self.parse_statement_list()?;
            self.consume(TokenType::RightBrace, "Expected '}' after backward body")?;
            Ok(BackwardDef {
                params,
                return_type,
                statement_list,
            })
        }

        // Weight initialization parsing
        func parse_weight_init(&mut self) -> Result<WeightInit> {
            self.consume(TokenType::WeightInit, "Expected 'weight_init' keyword")?;
            let init = self.parse_expression()?;
            Ok(WeightInit {
                init,
            })
        }

        // Safe block parsing
        func safe_block_declaration(&mut self) -> Result<Declaration> {
            let name = self.consume(TokenType::Identifier, "Expected safe block name")?;
            let params = self.parse_params()?;
            self.consume(TokenType::LeftBrace, "Expected '{' before safe block body")?;
            let assertion_list = self.parse_assertion_list()?;
            let statement_list = self.parse_statement_list()?;
            self.consume(TokenType::RightBrace, "Expected '}' after safe block body")?;
            Ok(Declaration::SafeBlock(SafeBlockDecl {
                name: name.lexeme,
                params,
                assertion_list,
                statement_list,
            }))
        }

        // Assertion list parsing
        func parse_assertion_list(&mut self) -> Result<Vector<Assertion>> {
            let mut list = Vector::new();
            while self.match_token(TokenType::Assert) {
                list.push(self.parse_assertion()?);
            }
            Ok(list)
        }

        // Assertion parsing
        func parse_assertion(&mut self) -> Result<Assertion> {
            self.consume(TokenType::Assert, "Expected 'assert' keyword")?;
            let expr = self.parse_expression()?;
            self.consume(TokenType::Colon, "Expected ':' operator")?;
            let message = self.consume(TokenType::StringLiteral, "Expected string literal")?;
            Ok(Assertion {
                expr,
                message: message.lexeme,
            })
        }

        // Helper methods
        func advance(&mut self) -> Token {
            self.previous = self.current.clone();
            
            loop {
                self.current = self.tokens[self.current].clone();
                if self.current.type_ != TokenType::Error {
                    break;
                }
                
                self.error_at_current(&self.current.lexeme);
            }
            
            self.previous.clone()
        }
        
        func consume(&mut self, type_: TokenType, message: &str) -> Result<Token> {
            if self.check(type_) {
                Ok(self.advance())
            } else {
                Err(ParserError::ExpectedToken(type_, message, self.current.pos))
            }
        }
        
        func match_token(&mut self, type_: TokenType) -> bool {
            if self.check(type_) {
                self.advance();
                true
            } else {
                false
            }
        }
        
        func check(&self, type_: TokenType) -> bool {
            if self.is_at_end() {
                false
            } else {
                self.current.type_ == type_
            }
        }
        
        func is_at_end(&self) -> bool {
            self.current.type_ == TokenType::Eof
        }
        
        func synchronize(&mut self) {
            self.panic_mode = false;
            
            while !self.is_at_end() {
                if self.previous.type_ == TokenType::Semicolon {
                    return;
                }
                
                match self.current.type_ {
                    TokenType::Class |
                    TokenType::Function |
                    TokenType::Let |
                    TokenType::For |
                    TokenType::If |
                    TokenType::While |
                    TokenType::Return |
                    TokenType::Import |
                    TokenType::Export => return,
                    _ => {}
                }
                
                self.advance();
            }
        }
        
        func error_at_current(&mut self, message: &str) {
            self.error_at(self.current.clone(), message);
        }
        
        func error_at(&mut self, token: Token, message: &str) {
            if self.panic_mode {
                return;
            }
            self.panic_mode = true;
            self.had_error = true;
            
            eprintln!("[line {}] Error", token.pos.line);
            
            match token.type_ {
                TokenType::Eof => eprint!(" at end"),
                TokenType::Error => {},
                _ => eprint!(" at '{}'", token.lexeme),
            }
            
            eprintln!(": {}", message);
        }

        // Parse effect declarations
        func parse_effect(&mut self) -> Result<EffectDecl> {
            let name = self.expect_identifier()?;
            let generics = if self.match_token(TokenType::Lt) {
                self.parse_generic_params()?
            } else {
                Vec::new()
            };

            self.expect(TokenType::LBrace)?;
            let mut operations = Vec::new();
            let mut handlers = Vec::new();

            while !self.check(TokenType::RBrace) {
                if self.match_token(TokenType::Handler) {
                    handlers.push(self.parse_handler()?);
                } else {
                    operations.push(self.parse_effect_operation()?);
                }
            }

            self.expect(TokenType::RBrace)?;
            Ok(EffectDecl { name, generics, operations, handlers })
        }

        // Parse effect operations
        func parse_effect_operation(&mut self) -> Result<EffectOpDecl> {
            let name = self.expect_identifier()?;
            self.expect(TokenType::LParen)?;
            let params = self.parse_params()?;
            self.expect(TokenType::RParen)?;
            
            let return_type = if self.match_token(TokenType::Arrow) {
                self.parse_type()?
            } else {
                TypeExpr::unit()
            };

            let constraints = if self.match_token(TokenType::Where) {
                self.parse_constraints()?
            } else {
                Vec::new()
            };

            Ok(EffectOpDecl { name, params, return_type, constraints })
        }

        // Parse linear type declarations
        func parse_linear_type(&mut self) -> Result<LinearTypeDecl> {
            let name = self.expect_identifier()?;
            let generics = if self.match_token(TokenType::Lt) {
                self.parse_generic_params()?
            } else {
                Vec::new()
            };

            self.expect(TokenType::LBrace)?;
            let mut operations = Vec::new();
            let mut destructor = None;

            while !self.check(TokenType::RBrace) {
                if self.match_token(TokenType::Destructor) {
                    if destructor.is_some() {
                        return Err(self.error("Multiple destructors in linear type"));
                    }
                    destructor = Some(self.parse_function()?);
                } else {
                    operations.push(self.parse_linear_operation()?);
                }
            }

            self.expect(TokenType::RBrace)?;
            Ok(LinearTypeDecl { name, generics, operations, destructor })
        }

        // Parse region declarations
        func parse_region(&mut self) -> Result<RegionDecl> {
            let name = self.expect_identifier()?;
            let lifetime = if self.match_token(TokenType::Lt) {
                Some(self.parse_lifetime()?)
            } else {
                None
            };

            let constraints = if self.match_token(TokenType::Where) {
                self.parse_constraints()?
            } else {
                Vec::new()
            };

            let body = self.parse_block()?;
            Ok(RegionDecl { name, lifetime, constraints, body })
        }

        // Parse actor declarations
        func parse_actor(&mut self) -> Result<ActorDecl> {
            let name = self.expect_identifier()?;
            self.expect(TokenType::LBrace)?;
            
            let mut state = Vec::new();
            let mut messages = Vec::new();
            let mut behaviors = Vec::new();

            while !self.check(TokenType::RBrace) {
                match self.current_token()?.type {
                    TokenType::Let | TokenType::Var => state.push(self.parse_variable()?),
                    TokenType::Message => messages.push(self.parse_message()?),
                    TokenType::Behavior => behaviors.push(self.parse_behavior()?),
                    _ => return Err(self.error("Expected state, message, or behavior declaration")),
                }
            }

            self.expect(TokenType::RBrace)?;
            Ok(ActorDecl { name, state, messages, behaviors })
        }

        // Parse string interpolation
        func parse_string_interpolation(&mut self) -> Result<StringInterpolationExpr> {
            let mut parts = Vec::new();
            
            self.expect(TokenType::StringStart)?;
            
            while !self.check(TokenType::StringEnd) {
                if self.match_token(TokenType::String) {
                    parts.push(StringPart::Literal(self.previous_token()?.lexeme));
                } else if self.match_token(TokenType::Dollar) {
                    self.expect(TokenType::LBrace)?;
                    let expr = self.parse_expression()?;
                    self.expect(TokenType::RBrace)?;
                    parts.push(StringPart::Expression(Box::new(expr)));
                }
            }
            
            self.expect(TokenType::StringEnd)?;
            Ok(StringInterpolationExpr { parts })
        }

        // Parse async/await expressions
        func parse_async_expression(&mut self) -> Result<AsyncExpr> {
            let return_type = if self.match_token(TokenType::Arrow) {
                self.parse_type()?
            } else {
                TypeExpr::unit()
            };
            
            let body = self.parse_block()?;
            Ok(AsyncExpr { body, return_type })
        }

        fn parse_await_expression(&mut self) -> Result<AwaitExpr> {
            let target = Box::new(self.parse_expression()?);
            Ok(AwaitExpr { target })
        }

        // Parse spawn expressions
        func parse_spawn(&mut self) -> Result<SpawnExpr> {
            let kind = if self.match_token(TokenType::Thread) {
                SpawnKind::Thread
            } else if self.match_token(TokenType::Task) {
                SpawnKind::Task
            } else if self.match_token(TokenType::Actor) {
                let name = self.expect_identifier()?;
                SpawnKind::Actor(name)
            } else {
                return Err(self.error("Expected thread, task, or actor"));
            };

            let body = Box::new(self.parse_expression()?);
            Ok(SpawnExpr { kind, body })
        }

        // Parse dependent types
        func parse_dependent_type(&mut self) -> Result<DependentTypeDecl> {
            let name = self.expect_identifier()?;
            self.expect(TokenType::LParen)?;
            let params = self.parse_params()?;
            self.expect(TokenType::RParen)?;
            
            self.expect(TokenType::Where)?;
            let refinement = Box::new(self.parse_expression()?);
            
            Ok(DependentTypeDecl { name, params, refinement })
        }

        // Parse refinement types
        func parse_refinement_type(&mut self) -> Result<RefinementTypeDecl> {
            let base_type = self.parse_type()?;
            self.expect(TokenType::LBrace)?;
            let predicate = Box::new(self.parse_expression()?);
            self.expect(TokenType::RBrace)?;
            
            Ok(RefinementTypeDecl { base_type, predicate })
        }
    }
}
