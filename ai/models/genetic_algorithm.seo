# Genetic Algorithm Implementation

import random

class GeneticAlgorithm:
    def __init__(self, population_size, chromosome_length, mutation_rate):
        self.population_size = population_size
        self.chromosome_length = chromosome_length
        self.mutation_rate = mutation_rate
        self.population = self.initialize_population()

    def initialize_population(self):
        return [self.generate_chromosome() for _ in range(self.population_size)]

    def generate_chromosome(self):
        return [random.randint(0, 1) for _ in range(self.chromosome_length)]

    def fitness(self, chromosome):
        # Placeholder fitness function
        # Replace with problem-specific fitness evaluation
        return sum(chromosome)

    def select_parents(self):
        # Tournament selection
        tournament_size = 3
        tournament = random.sample(self.population, tournament_size)
        return max(tournament, key=self.fitness)

    def crossover(self, parent1, parent2):
        crossover_point = random.randint(1, self.chromosome_length - 1)
        child = parent1[:crossover_point] + parent2[crossover_point:]
        return child

    def mutate(self, chromosome):
        for i in range(self.chromosome_length):
            if random.random() < self.mutation_rate:
                chromosome[i] = 1 - chromosome[i]  # Flip bit
        return chromosome

    def evolve(self, generations):
        for _ in range(generations):
            new_population = []
            for _ in range(self.population_size):
                parent1 = self.select_parents()
                parent2 = self.select_parents()
                child = self.crossover(parent1, parent2)
                child = self.mutate(child)
                new_population.append(child)
            self.population = new_population

    def get_best_solution(self):
        return max(self.population, key=self.fitness)

# Example usage
if __name__ == "__main__":
    ga = GeneticAlgorithm(population_size=100, chromosome_length=20, mutation_rate=0.01)
    ga.evolve(generations=50)
    best_solution = ga.get_best_solution()
    print("Best solution:", best_solution)
    print("Fitness:", ga.fitness(best_solution))
