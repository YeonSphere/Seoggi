// Seoggi Standard Library Prelude

// Core types
type Unit = ()
type Bool = true | false
type Int = i64
type Float = f64
type String = str

// Option type
enum Option<T> {
    Some(T),
    None
}

// Result type
enum Result<T, E> {
    Ok(T),
    Err(E)
}

// Iterator trait
trait Iterator {
    type Item
    
    fn next(&mut self) -> Option<Self::Item>
    fn size_hint(&self) -> (usize, Option<usize>)
    
    // Default implementations
    fn count(self) -> usize
    fn last(self) -> Option<Self::Item>
    fn nth(self, n: usize) -> Option<Self::Item>
    fn fold<B, F>(self, init: B, f: F) -> B where F: FnMut(B, Self::Item) -> B
    fn map<B, F>(self, f: F) -> Map<Self, F> where F: FnMut(Self::Item) -> B
    fn filter<P>(self, predicate: P) -> Filter<Self, P> where P: FnMut(&Self::Item) -> bool
    fn collect<B: FromIterator<Self::Item>>(self) -> B
}

// Collection traits
trait Collection<T> {
    fn len(&self) -> usize
    fn is_empty(&self) -> bool
    fn clear(&mut self)
    fn contains(&self, item: &T) -> bool
}

// Memory management traits
trait Drop {
    fn drop(&mut self)
}

trait Clone {
    fn clone(&self) -> Self
}

trait Copy: Clone {}

// Effect traits
trait Effect {
    type Output
    type Error
    
    fn run(&self) -> Result<Self::Output, Self::Error>
}

// Concurrency traits
trait Future {
    type Output
    
    fn poll(&mut self) -> Poll<Self::Output>
}

trait AsyncIterator {
    type Item
    
    fn next(&mut self) -> impl Future<Output = Option<Self::Item>>
}

// Standard collections
struct Vec<T> {
    data: Box<[T]>,
    len: usize,
    capacity: usize
}

struct HashMap<K, V> {
    entries: Vec<Option<(K, V)>>,
    size: usize
}

struct BTreeMap<K: Ord, V> {
    root: Option<Box<Node<K, V>>>,
    length: usize
}

// Memory types
struct Box<T> {
    ptr: *mut T
}

struct Rc<T> {
    ptr: *mut RcBox<T>
}

struct Arc<T> {
    ptr: *mut ArcInner<T>
}

struct Pin<P> {
    pointer: P
}

// Concurrency types
struct Mutex<T> {
    data: UnsafeCell<T>,
    lock: AtomicBool
}

struct RwLock<T> {
    data: UnsafeCell<T>,
    readers: AtomicUsize,
    writer: AtomicBool
}

struct Channel<T> {
    sender: Sender<T>,
    receiver: Receiver<T>
}

// Effect types
struct Try<T, E> {
    kind: TryKind<T, E>
}

struct IO<T> {
    effect: IOEffect<T>
}

struct State<S, T> {
    run: Box<dyn FnOnce(&mut S) -> T>
}

// Utility functions
fn panic(msg: &str) -> !
fn assert(cond: bool, msg: &str)
fn print(args: fmt::Arguments)
fn println(args: fmt::Arguments)

// Type conversion
trait From<T> {
    fn from(value: T) -> Self
}

trait Into<T>: Sized {
    fn into(self) -> T
}

trait TryFrom<T>: Sized {
    type Error
    fn try_from(value: T) -> Result<Self, Self::Error>
}

trait TryInto<T>: Sized {
    type Error
    fn try_into(self) -> Result<T, Self::Error>
}

// Formatting
mod fmt {
    trait Display {
        fn fmt(&self, f: &mut Formatter) -> Result<(), Error>
    }
    
    trait Debug {
        fn fmt(&self, f: &mut Formatter) -> Result<(), Error>
    }
}
