// Command Line Arguments Module
// Version: 0.1.0

module std::args;

// Get all command line arguments
pub fn get() -> []string {
    return __builtin_args_get();
}

// Get number of arguments
pub fn count() -> i32 {
    return __builtin_args_count();
}

// Get argument at index
pub fn get_at(index: i32) -> Option<string> {
    if index < 0 || index >= count() {
        return None;
    }
    return Some(__builtin_args_get_at(index));
}

// Get program name (argv[0])
pub fn program_name() -> string {
    return __builtin_args_program_name();
}

// Parse flags and options
pub fn parse_flags(args: []string) -> struct {
    flags: map[string]bool,
    options: map[string]string,
    positional: []string,
} {
    let result = struct {
        flags: map[string]bool{},
        options: map[string]string{},
        positional: []string{},
    };

    let i = 0;
    while i < args.len() {
        let arg = args[i];
        
        if arg.starts_with("--") {
            // Long option
            let option = arg[2..];
            if option.contains('=') {
                let parts = option.split('=', 2);
                result.options[parts[0]] = parts[1];
            } else if i + 1 < args.len() && !args[i + 1].starts_with('-') {
                result.options[option] = args[i + 1];
                i += 1;
            } else {
                result.flags[option] = true;
            }
        } else if arg.starts_with('-') {
            // Short option
            let flags = arg[1..];
            if flags.len() == 1 && i + 1 < args.len() && !args[i + 1].starts_with('-') {
                result.options[flags] = args[i + 1];
                i += 1;
            } else {
                for flag in flags {
                    result.flags[string::from_char(flag)] = true;
                }
            }
        } else {
            // Positional argument
            result.positional.push(arg);
        }
        
        i += 1;
    }

    return result;
}
