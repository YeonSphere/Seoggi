// YeonSphere Universal Open Source License (YUOSL)
// Copyright (c) 2024 Jeremy Matlock (@daedaevibin)
// All rights reserved.

// Self-contained seoggi installer

// System paths for different platforms
enum SystemPath {
    Windows {
        base: "C:\\Program Files\\seoggi",
        bin: "C:\\Program Files\\seoggi\\bin",
        lib: "C:\\Program Files\\seoggi\\lib",
        include: "C:\\Program Files\\seoggi\\include"
    },
    Unix {
        base: "/usr/local/seoggi",
        bin: "/usr/local/seoggi/bin",
        lib: "/usr/local/seoggi/lib",
        include: "/usr/local/seoggi/include"
    },
    Darwin {
        base: "/usr/local/seoggi",
        bin: "/usr/local/seoggi/bin",
        lib: "/usr/local/seoggi/lib",
        include: "/usr/local/seoggi/include"
    }
}

// Installer configuration
struct InstallerConfig {
    target: Target,
    system_path: SystemPath,
    opt_level: u32
}

// Main installer
struct Installer {
    config: InstallerConfig,
    
    // Create new installer
    fn new() -> Installer {
        // Detect platform
        let target = platform::detect();
        let system_path = match platform::os() {
            "windows" => SystemPath::Windows,
            "darwin" => SystemPath::Darwin,
            _ => SystemPath::Unix
        };
        
        Installer {
            config: InstallerConfig {
                target,
                system_path,
                opt_level: 2
            }
        }
    }
    
    // Run installation
    fn install(&mut self) -> Result<(), Error> {
        // 1. Create compiler
        println("Building seoggi compiler...");
        let compiler = self.build_compiler()?;
        
        // 2. Create system directories
        println("Creating system directories...");
        self.create_directories()?;
        
        // 3. Install compiler
        println("Installing compiler...");
        self.install_compiler(compiler)?;
        
        // 4. Set up environment
        println("Setting up environment...");
        self.setup_environment()?;
        
        println("Installation complete!");
        Ok(())
    }
    
    // Build the compiler from source
    fn build_compiler(&mut self) -> Result<Vec<u8>, Error> {
        // Create compiler options
        let options = CompilerOptions {
            target: self.config.target,
            opt_level: self.config.opt_level,
            debug_info: false,
            output_type: OutputType::Executable
        };
        
        // Create compiler
        let mut compiler = Compiler::new(options);
        
        // Compile all source files
        let sources = [
            "core/compiler/tokenizer.seo",
            "core/compiler/ir_gen.seo",
            "core/compiler/codegen.seo",
            "core/compiler/compiler.seo"
        ];
        
        let objects = compiler.compile_all(sources.to_vec())?;
        
        // Link into executable
        compiler.link(objects)
    }
    
    // Create system directories
    fn create_directories(&mut self) -> Result<(), Error> {
        match self.config.system_path {
            SystemPath::Windows { base, bin, lib, include } => {
                platform::create_dir_all(base)?;
                platform::create_dir_all(bin)?;
                platform::create_dir_all(lib)?;
                platform::create_dir_all(include)?;
            }
            SystemPath::Unix { base, bin, lib, include } => {
                platform::create_dir_all(base)?;
                platform::create_dir_all(bin)?;
                platform::create_dir_all(lib)?;
                platform::create_dir_all(include)?;
            }
            SystemPath::Darwin { base, bin, lib, include } => {
                platform::create_dir_all(base)?;
                platform::create_dir_all(bin)?;
                platform::create_dir_all(lib)?;
                platform::create_dir_all(include)?;
            }
        }
        Ok(())
    }
    
    // Install compiler binary
    fn install_compiler(&mut self, binary: Vec<u8>) -> Result<(), Error> {
        // Get binary path
        let bin_path = match self.config.system_path {
            SystemPath::Windows { bin, .. } => format!("{}\\seoggi.exe", bin),
            _ => format!("{}/seoggi", bin)
        };
        
        // Write binary
        platform::write_file(bin_path, &binary)?;
        
        // Set executable permissions on Unix/Darwin
        if !matches!(self.config.system_path, SystemPath::Windows { .. }) {
            platform::set_executable(bin_path)?;
        }
        
        Ok(())
    }
    
    // Set up environment
    fn setup_environment(&mut self) -> Result<(), Error> {
        match self.config.system_path {
            SystemPath::Windows { bin, .. } => {
                // Add to PATH
                let path = platform::get_env("PATH")?;
                let new_path = format!("{};{}", bin, path);
                platform::set_env("PATH", new_path)?;
            }
            SystemPath::Unix { bin, .. } | SystemPath::Darwin { bin, .. } => {
                // Create shell profile entry
                let profile = format!(
                    "\n# seoggi compiler\nexport PATH=\"{}:$PATH\"\n",
                    bin
                );
                
                // Add to shell profiles
                let home = platform::get_env("HOME")?;
                for profile_file in [".profile", ".bashrc", ".zshrc"] {
                    let path = format!("{}/{}", home, profile_file);
                    if platform::file_exists(&path) {
                        platform::append_file(path, &profile)?;
                    }
                }
            }
        }
        Ok(())
    }
}

// Platform-specific functionality
module platform {
    // Detect target platform
    fn detect() -> Target {
        let arch = platform::arch();
        let os = platform::os();
        
        match (arch, os) {
            ("x86_64", "windows") => Target::X86_64,
            ("x86_64", "linux") => Target::X86_64,
            ("x86_64", "darwin") => Target::X86_64,
            ("aarch64", "darwin") => Target::ARM64,
            ("riscv64", _) => Target::RISCV64,
            ("wasm32", _) => Target::WebAssembly,
            _ => panic("Unsupported platform")
        }
    }
    
    // Get system architecture
    fn arch() -> String {
        unsafe {
            // Use platform-specific syscall to get architecture
            match os() {
                "windows" => {
                    let mut info: SYSTEM_INFO;
                    GetSystemInfo(&mut info);
                    match info.processor_architecture {
                        9 => "x86_64",
                        5 => "arm64",
                        _ => "unknown"
                    }
                }
                _ => {
                    let mut uname: utsname;
                    uname(&mut uname);
                    match uname.machine {
                        "x86_64" => "x86_64",
                        "arm64" => "aarch64",
                        "riscv64" => "riscv64",
                        _ => "unknown"
                    }
                }
            }
        }
    }
    
    // Get operating system
    fn os() -> String {
        unsafe {
            #[cfg(windows)]
            { "windows" }
            
            #[cfg(target_os = "linux")]
            { "linux" }
            
            #[cfg(target_os = "macos")]
            { "darwin" }
            
            #[cfg(target_arch = "wasm32")]
            { "wasm" }
        }
    }
    
    // Create directory and parents
    fn create_dir_all(path: String) -> Result<(), Error> {
        unsafe {
            match os() {
                "windows" => {
                    if CreateDirectoryA(path.as_ptr(), null()) == 0 {
                        let err = GetLastError();
                        if err != ERROR_ALREADY_EXISTS {
                            return Err(Error::new("Failed to create directory"));
                        }
                    }
                }
                _ => {
                    if mkdir(path.as_ptr(), 0o755) != 0 {
                        let err = errno();
                        if err != EEXIST {
                            return Err(Error::new("Failed to create directory"));
                        }
                    }
                }
            }
            Ok(())
        }
    }
    
    // Write file
    fn write_file(path: String, data: &[u8]) -> Result<(), Error> {
        unsafe {
            match os() {
                "windows" => {
                    let handle = CreateFileA(
                        path.as_ptr(),
                        GENERIC_WRITE,
                        0,
                        null(),
                        CREATE_ALWAYS,
                        FILE_ATTRIBUTE_NORMAL,
                        null()
                    );
                    
                    if handle == INVALID_HANDLE_VALUE {
                        return Err(Error::new("Failed to create file"));
                    }
                    
                    let mut written = 0;
                    if WriteFile(
                        handle,
                        data.as_ptr(),
                        data.len() as u32,
                        &mut written,
                        null()
                    ) == 0 {
                        CloseHandle(handle);
                        return Err(Error::new("Failed to write file"));
                    }
                    
                    CloseHandle(handle);
                }
                _ => {
                    let fd = open(
                        path.as_ptr(),
                        O_WRONLY | O_CREAT | O_TRUNC,
                        0o644
                    );
                    
                    if fd < 0 {
                        return Err(Error::new("Failed to create file"));
                    }
                    
                    if write(fd, data.as_ptr(), data.len()) < 0 {
                        close(fd);
                        return Err(Error::new("Failed to write file"));
                    }
                    
                    close(fd);
                }
            }
            Ok(())
        }
    }
    
    // Set file as executable
    fn set_executable(path: String) -> Result<(), Error> {
        unsafe {
            if os() != "windows" {
                let mut stat: stat_t;
                if stat(path.as_ptr(), &mut stat) != 0 {
                    return Err(Error::new("Failed to get file stats"));
                }
                
                let mode = stat.st_mode | 0o111; // Add execute permission
                if chmod(path.as_ptr(), mode) != 0 {
                    return Err(Error::new("Failed to set executable"));
                }
            }
            Ok(())
        }
    }
    
    // Get environment variable
    fn get_env(name: String) -> Result<String, Error> {
        unsafe {
            match os() {
                "windows" => {
                    let mut buf: [u8; 32768];
                    let len = GetEnvironmentVariableA(
                        name.as_ptr(),
                        buf.as_mut_ptr(),
                        buf.len() as u32
                    );
                    
                    if len == 0 {
                        return Err(Error::new("Environment variable not found"));
                    }
                    
                    Ok(String::from_raw_parts(buf.as_ptr(), len as usize))
                }
                _ => {
                    let value = getenv(name.as_ptr());
                    if value.is_null() {
                        return Err(Error::new("Environment variable not found"));
                    }
                    
                    Ok(String::from_raw_parts(value, strlen(value)))
                }
            }
        }
    }
    
    // Set environment variable
    fn set_env(name: String, value: String) -> Result<(), Error> {
        unsafe {
            match os() {
                "windows" => {
                    if SetEnvironmentVariableA(
                        name.as_ptr(),
                        value.as_ptr()
                    ) == 0 {
                        return Err(Error::new("Failed to set environment variable"));
                    }
                }
                _ => {
                    if setenv(
                        name.as_ptr(),
                        value.as_ptr(),
                        1
                    ) != 0 {
                        return Err(Error::new("Failed to set environment variable"));
                    }
                }
            }
            Ok(())
        }
    }
}

// Main entry point
fn main() -> Result<(), Error> {
    let mut installer = Installer::new();
    installer.install()
}
